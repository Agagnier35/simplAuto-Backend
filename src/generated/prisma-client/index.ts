// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  ad: (where?: AdWhereInput) => Promise<boolean>;
  car: (where?: CarWhereInput) => Promise<boolean>;
  carCategory: (where?: CarCategoryWhereInput) => Promise<boolean>;
  carFeature: (where?: CarFeatureWhereInput) => Promise<boolean>;
  carFeatureCategory: (
    where?: CarFeatureCategoryWhereInput
  ) => Promise<boolean>;
  carModel: (where?: CarModelWhereInput) => Promise<boolean>;
  conversation: (where?: ConversationWhereInput) => Promise<boolean>;
  date: (where?: DateWhereInput) => Promise<boolean>;
  manufacturer: (where?: ManufacturerWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  offer: (where?: OfferWhereInput) => Promise<boolean>;
  offerAddon: (where?: OfferAddonWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  ad: (where: AdWhereUniqueInput) => AdPromise;
  ads: (
    args?: {
      where?: AdWhereInput;
      orderBy?: AdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ad>;
  adsConnection: (
    args?: {
      where?: AdWhereInput;
      orderBy?: AdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AdConnectionPromise;
  car: (where: CarWhereUniqueInput) => CarPromise;
  cars: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Car>;
  carsConnection: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarConnectionPromise;
  carCategory: (where: CarCategoryWhereUniqueInput) => CarCategoryPromise;
  carCategories: (
    args?: {
      where?: CarCategoryWhereInput;
      orderBy?: CarCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarCategory>;
  carCategoriesConnection: (
    args?: {
      where?: CarCategoryWhereInput;
      orderBy?: CarCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarCategoryConnectionPromise;
  carFeature: (where: CarFeatureWhereUniqueInput) => CarFeaturePromise;
  carFeatures: (
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarFeature>;
  carFeaturesConnection: (
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarFeatureConnectionPromise;
  carFeatureCategory: (
    where: CarFeatureCategoryWhereUniqueInput
  ) => CarFeatureCategoryPromise;
  carFeatureCategories: (
    args?: {
      where?: CarFeatureCategoryWhereInput;
      orderBy?: CarFeatureCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarFeatureCategory>;
  carFeatureCategoriesConnection: (
    args?: {
      where?: CarFeatureCategoryWhereInput;
      orderBy?: CarFeatureCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarFeatureCategoryConnectionPromise;
  carModel: (where: CarModelWhereUniqueInput) => CarModelPromise;
  carModels: (
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarModel>;
  carModelsConnection: (
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarModelConnectionPromise;
  conversation: (where: ConversationWhereUniqueInput) => ConversationPromise;
  conversations: (
    args?: {
      where?: ConversationWhereInput;
      orderBy?: ConversationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Conversation>;
  conversationsConnection: (
    args?: {
      where?: ConversationWhereInput;
      orderBy?: ConversationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ConversationConnectionPromise;
  dates: (
    args?: {
      where?: DateWhereInput;
      orderBy?: DateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Date>;
  datesConnection: (
    args?: {
      where?: DateWhereInput;
      orderBy?: DateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DateConnectionPromise;
  manufacturer: (where: ManufacturerWhereUniqueInput) => ManufacturerPromise;
  manufacturers: (
    args?: {
      where?: ManufacturerWhereInput;
      orderBy?: ManufacturerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Manufacturer>;
  manufacturersConnection: (
    args?: {
      where?: ManufacturerWhereInput;
      orderBy?: ManufacturerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ManufacturerConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Message>;
  messagesConnection: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessageConnectionPromise;
  offer: (where: OfferWhereUniqueInput) => OfferPromise;
  offers: (
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Offer>;
  offersConnection: (
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OfferConnectionPromise;
  offerAddon: (where: OfferAddonWhereUniqueInput) => OfferAddonPromise;
  offerAddons: (
    args?: {
      where?: OfferAddonWhereInput;
      orderBy?: OfferAddonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OfferAddon>;
  offerAddonsConnection: (
    args?: {
      where?: OfferAddonWhereInput;
      orderBy?: OfferAddonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OfferAddonConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAd: (data: AdCreateInput) => AdPromise;
  updateAd: (
    args: { data: AdUpdateInput; where: AdWhereUniqueInput }
  ) => AdPromise;
  updateManyAds: (
    args: { data: AdUpdateManyMutationInput; where?: AdWhereInput }
  ) => BatchPayloadPromise;
  upsertAd: (
    args: {
      where: AdWhereUniqueInput;
      create: AdCreateInput;
      update: AdUpdateInput;
    }
  ) => AdPromise;
  deleteAd: (where: AdWhereUniqueInput) => AdPromise;
  deleteManyAds: (where?: AdWhereInput) => BatchPayloadPromise;
  createCar: (data: CarCreateInput) => CarPromise;
  updateCar: (
    args: { data: CarUpdateInput; where: CarWhereUniqueInput }
  ) => CarPromise;
  updateManyCars: (
    args: { data: CarUpdateManyMutationInput; where?: CarWhereInput }
  ) => BatchPayloadPromise;
  upsertCar: (
    args: {
      where: CarWhereUniqueInput;
      create: CarCreateInput;
      update: CarUpdateInput;
    }
  ) => CarPromise;
  deleteCar: (where: CarWhereUniqueInput) => CarPromise;
  deleteManyCars: (where?: CarWhereInput) => BatchPayloadPromise;
  createCarCategory: (data: CarCategoryCreateInput) => CarCategoryPromise;
  updateCarCategory: (
    args: { data: CarCategoryUpdateInput; where: CarCategoryWhereUniqueInput }
  ) => CarCategoryPromise;
  updateManyCarCategories: (
    args: {
      data: CarCategoryUpdateManyMutationInput;
      where?: CarCategoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCarCategory: (
    args: {
      where: CarCategoryWhereUniqueInput;
      create: CarCategoryCreateInput;
      update: CarCategoryUpdateInput;
    }
  ) => CarCategoryPromise;
  deleteCarCategory: (where: CarCategoryWhereUniqueInput) => CarCategoryPromise;
  deleteManyCarCategories: (
    where?: CarCategoryWhereInput
  ) => BatchPayloadPromise;
  createCarFeature: (data: CarFeatureCreateInput) => CarFeaturePromise;
  updateCarFeature: (
    args: { data: CarFeatureUpdateInput; where: CarFeatureWhereUniqueInput }
  ) => CarFeaturePromise;
  updateManyCarFeatures: (
    args: {
      data: CarFeatureUpdateManyMutationInput;
      where?: CarFeatureWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCarFeature: (
    args: {
      where: CarFeatureWhereUniqueInput;
      create: CarFeatureCreateInput;
      update: CarFeatureUpdateInput;
    }
  ) => CarFeaturePromise;
  deleteCarFeature: (where: CarFeatureWhereUniqueInput) => CarFeaturePromise;
  deleteManyCarFeatures: (where?: CarFeatureWhereInput) => BatchPayloadPromise;
  createCarFeatureCategory: (
    data: CarFeatureCategoryCreateInput
  ) => CarFeatureCategoryPromise;
  updateCarFeatureCategory: (
    args: {
      data: CarFeatureCategoryUpdateInput;
      where: CarFeatureCategoryWhereUniqueInput;
    }
  ) => CarFeatureCategoryPromise;
  updateManyCarFeatureCategories: (
    args: {
      data: CarFeatureCategoryUpdateManyMutationInput;
      where?: CarFeatureCategoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCarFeatureCategory: (
    args: {
      where: CarFeatureCategoryWhereUniqueInput;
      create: CarFeatureCategoryCreateInput;
      update: CarFeatureCategoryUpdateInput;
    }
  ) => CarFeatureCategoryPromise;
  deleteCarFeatureCategory: (
    where: CarFeatureCategoryWhereUniqueInput
  ) => CarFeatureCategoryPromise;
  deleteManyCarFeatureCategories: (
    where?: CarFeatureCategoryWhereInput
  ) => BatchPayloadPromise;
  createCarModel: (data: CarModelCreateInput) => CarModelPromise;
  updateCarModel: (
    args: { data: CarModelUpdateInput; where: CarModelWhereUniqueInput }
  ) => CarModelPromise;
  updateManyCarModels: (
    args: { data: CarModelUpdateManyMutationInput; where?: CarModelWhereInput }
  ) => BatchPayloadPromise;
  upsertCarModel: (
    args: {
      where: CarModelWhereUniqueInput;
      create: CarModelCreateInput;
      update: CarModelUpdateInput;
    }
  ) => CarModelPromise;
  deleteCarModel: (where: CarModelWhereUniqueInput) => CarModelPromise;
  deleteManyCarModels: (where?: CarModelWhereInput) => BatchPayloadPromise;
  createConversation: (data: ConversationCreateInput) => ConversationPromise;
  updateConversation: (
    args: { data: ConversationUpdateInput; where: ConversationWhereUniqueInput }
  ) => ConversationPromise;
  updateManyConversations: (
    args: {
      data: ConversationUpdateManyMutationInput;
      where?: ConversationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertConversation: (
    args: {
      where: ConversationWhereUniqueInput;
      create: ConversationCreateInput;
      update: ConversationUpdateInput;
    }
  ) => ConversationPromise;
  deleteConversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationPromise;
  deleteManyConversations: (
    where?: ConversationWhereInput
  ) => BatchPayloadPromise;
  createDate: (data: DateCreateInput) => DatePromise;
  updateManyDates: (
    args: { data: DateUpdateManyMutationInput; where?: DateWhereInput }
  ) => BatchPayloadPromise;
  deleteManyDates: (where?: DateWhereInput) => BatchPayloadPromise;
  createManufacturer: (data: ManufacturerCreateInput) => ManufacturerPromise;
  updateManufacturer: (
    args: { data: ManufacturerUpdateInput; where: ManufacturerWhereUniqueInput }
  ) => ManufacturerPromise;
  updateManyManufacturers: (
    args: {
      data: ManufacturerUpdateManyMutationInput;
      where?: ManufacturerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertManufacturer: (
    args: {
      where: ManufacturerWhereUniqueInput;
      create: ManufacturerCreateInput;
      update: ManufacturerUpdateInput;
    }
  ) => ManufacturerPromise;
  deleteManufacturer: (
    where: ManufacturerWhereUniqueInput
  ) => ManufacturerPromise;
  deleteManyManufacturers: (
    where?: ManufacturerWhereInput
  ) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (
    args: { data: MessageUpdateInput; where: MessageWhereUniqueInput }
  ) => MessagePromise;
  updateManyMessages: (
    args: { data: MessageUpdateManyMutationInput; where?: MessageWhereInput }
  ) => BatchPayloadPromise;
  upsertMessage: (
    args: {
      where: MessageWhereUniqueInput;
      create: MessageCreateInput;
      update: MessageUpdateInput;
    }
  ) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createOffer: (data: OfferCreateInput) => OfferPromise;
  updateOffer: (
    args: { data: OfferUpdateInput; where: OfferWhereUniqueInput }
  ) => OfferPromise;
  updateManyOffers: (
    args: { data: OfferUpdateManyMutationInput; where?: OfferWhereInput }
  ) => BatchPayloadPromise;
  upsertOffer: (
    args: {
      where: OfferWhereUniqueInput;
      create: OfferCreateInput;
      update: OfferUpdateInput;
    }
  ) => OfferPromise;
  deleteOffer: (where: OfferWhereUniqueInput) => OfferPromise;
  deleteManyOffers: (where?: OfferWhereInput) => BatchPayloadPromise;
  createOfferAddon: (data: OfferAddonCreateInput) => OfferAddonPromise;
  updateOfferAddon: (
    args: { data: OfferAddonUpdateInput; where: OfferAddonWhereUniqueInput }
  ) => OfferAddonPromise;
  updateManyOfferAddons: (
    args: {
      data: OfferAddonUpdateManyMutationInput;
      where?: OfferAddonWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOfferAddon: (
    args: {
      where: OfferAddonWhereUniqueInput;
      create: OfferAddonCreateInput;
      update: OfferAddonUpdateInput;
    }
  ) => OfferAddonPromise;
  deleteOfferAddon: (where: OfferAddonWhereUniqueInput) => OfferAddonPromise;
  deleteManyOfferAddons: (where?: OfferAddonWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  ad: (where?: AdSubscriptionWhereInput) => AdSubscriptionPayloadSubscription;
  car: (
    where?: CarSubscriptionWhereInput
  ) => CarSubscriptionPayloadSubscription;
  carCategory: (
    where?: CarCategorySubscriptionWhereInput
  ) => CarCategorySubscriptionPayloadSubscription;
  carFeature: (
    where?: CarFeatureSubscriptionWhereInput
  ) => CarFeatureSubscriptionPayloadSubscription;
  carFeatureCategory: (
    where?: CarFeatureCategorySubscriptionWhereInput
  ) => CarFeatureCategorySubscriptionPayloadSubscription;
  carModel: (
    where?: CarModelSubscriptionWhereInput
  ) => CarModelSubscriptionPayloadSubscription;
  conversation: (
    where?: ConversationSubscriptionWhereInput
  ) => ConversationSubscriptionPayloadSubscription;
  date: (
    where?: DateSubscriptionWhereInput
  ) => DateSubscriptionPayloadSubscription;
  manufacturer: (
    where?: ManufacturerSubscriptionWhereInput
  ) => ManufacturerSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  offer: (
    where?: OfferSubscriptionWhereInput
  ) => OfferSubscriptionPayloadSubscription;
  offerAddon: (
    where?: OfferAddonSubscriptionWhereInput
  ) => OfferAddonSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OfferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "price_ASC"
  | "price_DESC"
  | "status_ASC"
  | "status_DESC"
  | "finalRank_ASC"
  | "finalRank_DESC";

export type ConversationStatus = "OPENED" | "DELETED";

export type CarFeatureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "location_ASC"
  | "location_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "facebookID_ASC"
  | "facebookID_DESC"
  | "googleID_ASC"
  | "googleID_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "clientType_ASC"
  | "clientType_DESC"
  | "language_ASC"
  | "language_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarModelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DateOrderByInput =
  | "day_ASC"
  | "day_DESC"
  | "month_ASC"
  | "month_DESC"
  | "year_ASC"
  | "year_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "year_ASC"
  | "year_DESC"
  | "mileage_ASC"
  | "mileage_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Gender = "MALE" | "FEMALE" | "OTHER";

export type AdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "priceLowerBound_ASC"
  | "priceLowerBound_DESC"
  | "priceHigherBound_ASC"
  | "priceHigherBound_DESC"
  | "mileageLowerBound_ASC"
  | "mileageLowerBound_DESC"
  | "mileageHigherBound_ASC"
  | "mileageHigherBound_DESC"
  | "yearLowerBound_ASC"
  | "yearLowerBound_DESC"
  | "yearHigherBound_ASC"
  | "yearHigherBound_DESC"
  | "isUrgent_ASC"
  | "isUrgent_DESC"
  | "isFirst_ASC"
  | "isFirst_DESC"
  | "status_ASC"
  | "status_DESC";

export type CarCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarFeatureType = "TRUE_FALSE" | "MULTIPLE_CHOICE";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarStatus = "PUBLISHED" | "SOLD" | "DELETED";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type OfferStatus = "PUBLISHED" | "ACCEPTED" | "DELETED";

export type ClientType = "COMPANY" | "INDIVIDUAL";

export type ClientLanguage = "FRENCH" | "ENGLISH";

export type AdStatus = "PUBLISHED" | "ACCEPTED" | "DELETED";

export type ManufacturerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OfferAddonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "rankValue_ASC"
  | "rankValue_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConversationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission = "USER" | "PREMIUM" | "ADMIN";

export type CarFeatureCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CarModelScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CarModelScalarWhereInput[] | CarModelScalarWhereInput;
  OR?: CarModelScalarWhereInput[] | CarModelScalarWhereInput;
  NOT?: CarModelScalarWhereInput[] | CarModelScalarWhereInput;
}

export type AdWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarFeatureCategoryUpdateOneRequiredWithoutFeaturesInput {
  create?: CarFeatureCategoryCreateWithoutFeaturesInput;
  update?: CarFeatureCategoryUpdateWithoutFeaturesDataInput;
  upsert?: CarFeatureCategoryUpsertWithoutFeaturesInput;
  connect?: CarFeatureCategoryWhereUniqueInput;
}

export interface ConversationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  offer?: OfferWhereInput;
  buyer?: UserWhereInput;
  seller?: UserWhereInput;
  messages_every?: MessageWhereInput;
  messages_some?: MessageWhereInput;
  messages_none?: MessageWhereInput;
  status?: ConversationStatus;
  status_not?: ConversationStatus;
  status_in?: ConversationStatus[] | ConversationStatus;
  status_not_in?: ConversationStatus[] | ConversationStatus;
  AND?: ConversationWhereInput[] | ConversationWhereInput;
  OR?: ConversationWhereInput[] | ConversationWhereInput;
  NOT?: ConversationWhereInput[] | ConversationWhereInput;
}

export interface CarFeatureCategoryUpdateWithoutFeaturesDataInput {
  name?: String;
  type?: CarFeatureType;
}

export interface OfferAddonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rankValue?: Int;
  rankValue_not?: Int;
  rankValue_in?: Int[] | Int;
  rankValue_not_in?: Int[] | Int;
  rankValue_lt?: Int;
  rankValue_lte?: Int;
  rankValue_gt?: Int;
  rankValue_gte?: Int;
  AND?: OfferAddonWhereInput[] | OfferAddonWhereInput;
  OR?: OfferAddonWhereInput[] | OfferAddonWhereInput;
  NOT?: OfferAddonWhereInput[] | OfferAddonWhereInput;
}

export interface OfferCreateOneWithoutConversationInput {
  create?: OfferCreateWithoutConversationInput;
  connect?: OfferWhereUniqueInput;
}

export interface CarUpsertWithWhereUniqueWithoutOwnerInput {
  where: CarWhereUniqueInput;
  update: CarUpdateWithoutOwnerDataInput;
  create: CarCreateWithoutOwnerInput;
}

export interface OfferCreateWithoutConversationInput {
  creator: UserCreateOneInput;
  ad: AdCreateOneWithoutOffersInput;
  car: CarCreateOneWithoutOffersInput;
  price: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonCreateManyInput;
}

export interface CarFeatureCategoryUpsertWithoutFeaturesInput {
  update: CarFeatureCategoryUpdateWithoutFeaturesDataInput;
  create: CarFeatureCategoryCreateWithoutFeaturesInput;
}

export interface AdCreateOneWithoutOffersInput {
  create?: AdCreateWithoutOffersInput;
  connect?: AdWhereUniqueInput;
}

export interface CarFeatureCategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  type?: CarFeatureType;
  type_not?: CarFeatureType;
  type_in?: CarFeatureType[] | CarFeatureType;
  type_not_in?: CarFeatureType[] | CarFeatureType;
  features_every?: CarFeatureWhereInput;
  features_some?: CarFeatureWhereInput;
  features_none?: CarFeatureWhereInput;
  AND?: CarFeatureCategoryWhereInput[] | CarFeatureCategoryWhereInput;
  OR?: CarFeatureCategoryWhereInput[] | CarFeatureCategoryWhereInput;
  NOT?: CarFeatureCategoryWhereInput[] | CarFeatureCategoryWhereInput;
}

export interface AdCreateWithoutOffersInput {
  creator: UserCreateOneWithoutAdsInput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  manufacturer?: ManufacturerCreateOneInput;
  model?: CarModelCreateOneInput;
  category?: CarCategoryCreateOneInput;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  features?: CarFeatureCreateManyInput;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface OfferAddonCreateManyInput {
  create?: OfferAddonCreateInput[] | OfferAddonCreateInput;
  connect?: OfferAddonWhereUniqueInput[] | OfferAddonWhereUniqueInput;
}

export interface CarCategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CarCategoryWhereInput[] | CarCategoryWhereInput;
  OR?: CarCategoryWhereInput[] | CarCategoryWhereInput;
  NOT?: CarCategoryWhereInput[] | CarCategoryWhereInput;
}

export interface OfferAddonCreateInput {
  name: String;
  rankValue?: Int;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface MessageCreateManyWithoutConversationInput {
  create?:
    | MessageCreateWithoutConversationInput[]
    | MessageCreateWithoutConversationInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface ManufacturerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ManufacturerWhereInput;
  AND?:
    | ManufacturerSubscriptionWhereInput[]
    | ManufacturerSubscriptionWhereInput;
  OR?:
    | ManufacturerSubscriptionWhereInput[]
    | ManufacturerSubscriptionWhereInput;
  NOT?:
    | ManufacturerSubscriptionWhereInput[]
    | ManufacturerSubscriptionWhereInput;
}

export interface MessageCreateWithoutConversationInput {
  sender: UserCreateOneInput;
  text: String;
  image?: String;
}

export interface ManufacturerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  models_every?: CarModelWhereInput;
  models_some?: CarModelWhereInput;
  models_none?: CarModelWhereInput;
  AND?: ManufacturerWhereInput[] | ManufacturerWhereInput;
  OR?: ManufacturerWhereInput[] | ManufacturerWhereInput;
  NOT?: ManufacturerWhereInput[] | ManufacturerWhereInput;
}

export interface ConversationCreateOneWithoutOfferInput {
  create?: ConversationCreateWithoutOfferInput;
  connect?: ConversationWhereUniqueInput;
}

export interface CarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  owner?: UserWhereInput;
  manufacturer?: ManufacturerWhereInput;
  model?: CarModelWhereInput;
  category?: CarCategoryWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  mileage?: Int;
  mileage_not?: Int;
  mileage_in?: Int[] | Int;
  mileage_not_in?: Int[] | Int;
  mileage_lt?: Int;
  mileage_lte?: Int;
  mileage_gt?: Int;
  mileage_gte?: Int;
  features_every?: CarFeatureWhereInput;
  features_some?: CarFeatureWhereInput;
  features_none?: CarFeatureWhereInput;
  status?: CarStatus;
  status_not?: CarStatus;
  status_in?: CarStatus[] | CarStatus;
  status_not_in?: CarStatus[] | CarStatus;
  offers_every?: OfferWhereInput;
  offers_some?: OfferWhereInput;
  offers_none?: OfferWhereInput;
  AND?: CarWhereInput[] | CarWhereInput;
  OR?: CarWhereInput[] | CarWhereInput;
  NOT?: CarWhereInput[] | CarWhereInput;
}

export interface ConversationCreateWithoutOfferInput {
  buyer: UserCreateOneWithoutConversationsInput;
  seller: UserCreateOneInput;
  messages?: MessageCreateManyWithoutConversationInput;
  status?: ConversationStatus;
}

export interface CarFeatureCategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarFeatureCategoryWhereInput;
  AND?:
    | CarFeatureCategorySubscriptionWhereInput[]
    | CarFeatureCategorySubscriptionWhereInput;
  OR?:
    | CarFeatureCategorySubscriptionWhereInput[]
    | CarFeatureCategorySubscriptionWhereInput;
  NOT?:
    | CarFeatureCategorySubscriptionWhereInput[]
    | CarFeatureCategorySubscriptionWhereInput;
}

export interface UserCreateOneWithoutConversationsInput {
  create?: UserCreateWithoutConversationsInput;
  connect?: UserWhereUniqueInput;
}

export interface CarFeatureSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarFeatureWhereInput;
  AND?: CarFeatureSubscriptionWhereInput[] | CarFeatureSubscriptionWhereInput;
  OR?: CarFeatureSubscriptionWhereInput[] | CarFeatureSubscriptionWhereInput;
  NOT?: CarFeatureSubscriptionWhereInput[] | CarFeatureSubscriptionWhereInput;
}

export interface UserCreateWithoutConversationsInput {
  email: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password: String;
  location: String;
  birthDate?: DateCreateOneInput;
  gender?: Gender;
  permissions?: UserCreatepermissionsInput;
  ads?: AdCreateManyWithoutCreatorInput;
  cars?: CarCreateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  clientType: ClientType;
  language?: ClientLanguage;
}

export interface CarCategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarCategoryWhereInput;
  AND?: CarCategorySubscriptionWhereInput[] | CarCategorySubscriptionWhereInput;
  OR?: CarCategorySubscriptionWhereInput[] | CarCategorySubscriptionWhereInput;
  NOT?: CarCategorySubscriptionWhereInput[] | CarCategorySubscriptionWhereInput;
}

export interface AdUpdateInput {
  creator?: UserUpdateOneRequiredWithoutAdsInput;
  offers?: OfferUpdateManyWithoutAdInput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  manufacturer?: ManufacturerUpdateOneInput;
  model?: CarModelUpdateOneInput;
  category?: CarCategoryUpdateOneInput;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  features?: CarFeatureUpdateManyInput;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface AdSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AdWhereInput;
  AND?: AdSubscriptionWhereInput[] | AdSubscriptionWhereInput;
  OR?: AdSubscriptionWhereInput[] | AdSubscriptionWhereInput;
  NOT?: AdSubscriptionWhereInput[] | AdSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutAdsInput {
  create?: UserCreateWithoutAdsInput;
  update?: UserUpdateWithoutAdsDataInput;
  upsert?: UserUpsertWithoutAdsInput;
  connect?: UserWhereUniqueInput;
}

export type CarWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutAdsDataInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password?: String;
  location?: String;
  birthDate?: DateUpdateOneInput;
  gender?: Gender;
  permissions?: UserUpdatepermissionsInput;
  cars?: CarUpdateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationUpdateManyWithoutBuyerInput;
  clientType?: ClientType;
  language?: ClientLanguage;
}

export interface OfferAddonUpdateManyMutationInput {
  name?: String;
  rankValue?: Int;
}

export interface DateUpdateOneInput {
  create?: DateCreateInput;
  update?: DateUpdateDataInput;
  upsert?: DateUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export type CarCategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DateUpdateDataInput {
  day?: Int;
  month?: Int;
  year?: Int;
}

export interface OfferUpdateManyMutationInput {
  price?: Float;
  status?: OfferStatus;
  finalRank?: Int;
}

export interface DateUpsertNestedInput {
  update: DateUpdateDataInput;
  create: DateCreateInput;
}

export interface OfferCreateInput {
  creator: UserCreateOneInput;
  ad: AdCreateOneWithoutOffersInput;
  car: CarCreateOneWithoutOffersInput;
  price: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonCreateManyInput;
  conversation?: ConversationCreateOneWithoutOfferInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface MessageUpdateManyMutationInput {
  text?: String;
  image?: String;
}

export interface CarUpdateManyWithoutOwnerInput {
  create?: CarCreateWithoutOwnerInput[] | CarCreateWithoutOwnerInput;
  delete?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  connect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  set?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  disconnect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  update?:
    | CarUpdateWithWhereUniqueWithoutOwnerInput[]
    | CarUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | CarUpsertWithWhereUniqueWithoutOwnerInput[]
    | CarUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: CarScalarWhereInput[] | CarScalarWhereInput;
  updateMany?:
    | CarUpdateManyWithWhereNestedInput[]
    | CarUpdateManyWithWhereNestedInput;
}

export interface ConversationUpdateWithoutMessagesDataInput {
  offer?: OfferUpdateOneRequiredWithoutConversationInput;
  buyer?: UserUpdateOneRequiredWithoutConversationsInput;
  seller?: UserUpdateOneRequiredInput;
  status?: ConversationStatus;
}

export interface CarUpdateWithWhereUniqueWithoutOwnerInput {
  where: CarWhereUniqueInput;
  data: CarUpdateWithoutOwnerDataInput;
}

export interface ConversationUpdateOneRequiredWithoutMessagesInput {
  create?: ConversationCreateWithoutMessagesInput;
  update?: ConversationUpdateWithoutMessagesDataInput;
  upsert?: ConversationUpsertWithoutMessagesInput;
  connect?: ConversationWhereUniqueInput;
}

export interface CarUpdateWithoutOwnerDataInput {
  manufacturer?: ManufacturerUpdateOneRequiredInput;
  model?: CarModelUpdateOneRequiredInput;
  category?: CarCategoryUpdateOneRequiredInput;
  description?: String;
  year?: Int;
  mileage?: Int;
  photos?: CarUpdatephotosInput;
  features?: CarFeatureUpdateManyInput;
  status?: CarStatus;
  offers?: OfferUpdateManyWithoutCarInput;
}

export interface ConversationCreateWithoutMessagesInput {
  offer: OfferCreateOneWithoutConversationInput;
  buyer: UserCreateOneWithoutConversationsInput;
  seller: UserCreateOneInput;
  status?: ConversationStatus;
}

export interface ManufacturerUpdateOneRequiredInput {
  create?: ManufacturerCreateInput;
  update?: ManufacturerUpdateDataInput;
  upsert?: ManufacturerUpsertNestedInput;
  connect?: ManufacturerWhereUniqueInput;
}

export type CarModelWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ManufacturerUpdateDataInput {
  name?: String;
  models?: CarModelUpdateManyInput;
}

export interface ManufacturerUpdateManyMutationInput {
  name?: String;
}

export interface CarModelUpdateManyInput {
  create?: CarModelCreateInput[] | CarModelCreateInput;
  update?:
    | CarModelUpdateWithWhereUniqueNestedInput[]
    | CarModelUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CarModelUpsertWithWhereUniqueNestedInput[]
    | CarModelUpsertWithWhereUniqueNestedInput;
  delete?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  connect?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  set?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  disconnect?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  deleteMany?: CarModelScalarWhereInput[] | CarModelScalarWhereInput;
  updateMany?:
    | CarModelUpdateManyWithWhereNestedInput[]
    | CarModelUpdateManyWithWhereNestedInput;
}

export type ConversationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarModelUpdateWithWhereUniqueNestedInput {
  where: CarModelWhereUniqueInput;
  data: CarModelUpdateDataInput;
}

export interface ConversationUpdateManyMutationInput {
  status?: ConversationStatus;
}

export interface CarModelUpdateDataInput {
  name?: String;
}

export interface ConversationCreateInput {
  offer: OfferCreateOneWithoutConversationInput;
  buyer: UserCreateOneWithoutConversationsInput;
  seller: UserCreateOneInput;
  messages?: MessageCreateManyWithoutConversationInput;
  status?: ConversationStatus;
}

export interface CarModelUpsertWithWhereUniqueNestedInput {
  where: CarModelWhereUniqueInput;
  update: CarModelUpdateDataInput;
  create: CarModelCreateInput;
}

export interface CarModelUpdateInput {
  name?: String;
}

export interface CarUpdateManyDataInput {
  description?: String;
  year?: Int;
  mileage?: Int;
  photos?: CarUpdatephotosInput;
  status?: CarStatus;
}

export type ManufacturerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarModelUpdateManyWithWhereNestedInput {
  where: CarModelScalarWhereInput;
  data: CarModelUpdateManyDataInput;
}

export interface CarFeatureUpdateWithoutCategoryDataInput {
  name?: String;
}

export interface CarModelUpdateManyDataInput {
  name?: String;
}

export interface CarFeatureUpdateManyWithoutCategoryInput {
  create?:
    | CarFeatureCreateWithoutCategoryInput[]
    | CarFeatureCreateWithoutCategoryInput;
  delete?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  connect?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  set?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  disconnect?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  update?:
    | CarFeatureUpdateWithWhereUniqueWithoutCategoryInput[]
    | CarFeatureUpdateWithWhereUniqueWithoutCategoryInput;
  upsert?:
    | CarFeatureUpsertWithWhereUniqueWithoutCategoryInput[]
    | CarFeatureUpsertWithWhereUniqueWithoutCategoryInput;
  deleteMany?: CarFeatureScalarWhereInput[] | CarFeatureScalarWhereInput;
  updateMany?:
    | CarFeatureUpdateManyWithWhereNestedInput[]
    | CarFeatureUpdateManyWithWhereNestedInput;
}

export interface ManufacturerUpsertNestedInput {
  update: ManufacturerUpdateDataInput;
  create: ManufacturerCreateInput;
}

export interface CarFeatureCategoryUpdateInput {
  name?: String;
  type?: CarFeatureType;
  features?: CarFeatureUpdateManyWithoutCategoryInput;
}

export interface CarModelUpdateOneRequiredInput {
  create?: CarModelCreateInput;
  update?: CarModelUpdateDataInput;
  upsert?: CarModelUpsertNestedInput;
  connect?: CarModelWhereUniqueInput;
}

export interface CarFeatureCreateManyWithoutCategoryInput {
  create?:
    | CarFeatureCreateWithoutCategoryInput[]
    | CarFeatureCreateWithoutCategoryInput;
  connect?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
}

export interface CarModelUpsertNestedInput {
  update: CarModelUpdateDataInput;
  create: CarModelCreateInput;
}

export interface CarFeatureCategoryCreateInput {
  name: String;
  type: CarFeatureType;
  features?: CarFeatureCreateManyWithoutCategoryInput;
}

export interface CarCategoryUpdateOneRequiredInput {
  create?: CarCategoryCreateInput;
  update?: CarCategoryUpdateDataInput;
  upsert?: CarCategoryUpsertNestedInput;
  connect?: CarCategoryWhereUniqueInput;
}

export interface CarFeatureUpdateInput {
  name?: String;
  category?: CarFeatureCategoryUpdateOneRequiredWithoutFeaturesInput;
}

export interface CarCategoryUpdateDataInput {
  name?: String;
}

export interface CarCategoryUpdateManyMutationInput {
  name?: String;
}

export interface CarCategoryUpsertNestedInput {
  update: CarCategoryUpdateDataInput;
  create: CarCategoryCreateInput;
}

export interface CarUpdateManyMutationInput {
  description?: String;
  year?: Int;
  mileage?: Int;
  photos?: CarUpdatephotosInput;
  status?: CarStatus;
}

export interface CarUpdatephotosInput {
  set?: String[] | String;
}

export interface CarUpdateInput {
  owner?: UserUpdateOneRequiredWithoutCarsInput;
  manufacturer?: ManufacturerUpdateOneRequiredInput;
  model?: CarModelUpdateOneRequiredInput;
  category?: CarCategoryUpdateOneRequiredInput;
  description?: String;
  year?: Int;
  mileage?: Int;
  photos?: CarUpdatephotosInput;
  features?: CarFeatureUpdateManyInput;
  status?: CarStatus;
  offers?: OfferUpdateManyWithoutCarInput;
}

export interface CarFeatureUpdateManyInput {
  create?: CarFeatureCreateInput[] | CarFeatureCreateInput;
  update?:
    | CarFeatureUpdateWithWhereUniqueNestedInput[]
    | CarFeatureUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CarFeatureUpsertWithWhereUniqueNestedInput[]
    | CarFeatureUpsertWithWhereUniqueNestedInput;
  delete?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  connect?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  set?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  disconnect?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
  deleteMany?: CarFeatureScalarWhereInput[] | CarFeatureScalarWhereInput;
  updateMany?:
    | CarFeatureUpdateManyWithWhereNestedInput[]
    | CarFeatureUpdateManyWithWhereNestedInput;
}

export interface AdUpdateManyMutationInput {
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface CarFeatureUpdateWithWhereUniqueNestedInput {
  where: CarFeatureWhereUniqueInput;
  data: CarFeatureUpdateDataInput;
}

export interface UserCreateOneWithoutAdsInput {
  create?: UserCreateWithoutAdsInput;
  connect?: UserWhereUniqueInput;
}

export interface CarFeatureUpdateDataInput {
  name?: String;
  category?: CarFeatureCategoryUpdateOneRequiredWithoutFeaturesInput;
}

export interface DateCreateOneInput {
  create?: DateCreateInput;
}

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sender?: UserWhereInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  conversation?: ConversationWhereInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface CarUpdateManyWithWhereNestedInput {
  where: CarScalarWhereInput;
  data: CarUpdateManyDataInput;
}

export interface CarCreateWithoutOwnerInput {
  manufacturer: ManufacturerCreateOneInput;
  model: CarModelCreateOneInput;
  category: CarCategoryCreateOneInput;
  description?: String;
  year: Int;
  mileage: Int;
  photos?: CarCreatephotosInput;
  features?: CarFeatureCreateManyInput;
  status?: CarStatus;
  offers?: OfferCreateManyWithoutCarInput;
}

export interface CarScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  mileage?: Int;
  mileage_not?: Int;
  mileage_in?: Int[] | Int;
  mileage_not_in?: Int[] | Int;
  mileage_lt?: Int;
  mileage_lte?: Int;
  mileage_gt?: Int;
  mileage_gte?: Int;
  status?: CarStatus;
  status_not?: CarStatus;
  status_in?: CarStatus[] | CarStatus;
  status_not_in?: CarStatus[] | CarStatus;
  AND?: CarScalarWhereInput[] | CarScalarWhereInput;
  OR?: CarScalarWhereInput[] | CarScalarWhereInput;
  NOT?: CarScalarWhereInput[] | CarScalarWhereInput;
}

export interface ManufacturerCreateInput {
  name: String;
  models?: CarModelCreateManyInput;
}

export interface CarFeatureUpsertWithWhereUniqueNestedInput {
  where: CarFeatureWhereUniqueInput;
  update: CarFeatureUpdateDataInput;
  create: CarFeatureCreateInput;
}

export interface CarModelCreateInput {
  name: String;
}

export interface CarFeatureScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CarFeatureScalarWhereInput[] | CarFeatureScalarWhereInput;
  OR?: CarFeatureScalarWhereInput[] | CarFeatureScalarWhereInput;
  NOT?: CarFeatureScalarWhereInput[] | CarFeatureScalarWhereInput;
}

export interface CarCategoryCreateOneInput {
  create?: CarCategoryCreateInput;
  connect?: CarCategoryWhereUniqueInput;
}

export interface CarFeatureUpdateManyWithWhereNestedInput {
  where: CarFeatureScalarWhereInput;
  data: CarFeatureUpdateManyDataInput;
}

export interface CarCreatephotosInput {
  set?: String[] | String;
}

export interface CarFeatureUpdateManyDataInput {
  name?: String;
}

export interface CarFeatureCreateInput {
  name: String;
  category: CarFeatureCategoryCreateOneWithoutFeaturesInput;
}

export interface OfferUpdateManyWithoutCarInput {
  create?: OfferCreateWithoutCarInput[] | OfferCreateWithoutCarInput;
  delete?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  connect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  set?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  disconnect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  update?:
    | OfferUpdateWithWhereUniqueWithoutCarInput[]
    | OfferUpdateWithWhereUniqueWithoutCarInput;
  upsert?:
    | OfferUpsertWithWhereUniqueWithoutCarInput[]
    | OfferUpsertWithWhereUniqueWithoutCarInput;
  deleteMany?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  updateMany?:
    | OfferUpdateManyWithWhereNestedInput[]
    | OfferUpdateManyWithWhereNestedInput;
}

export interface CarFeatureCategoryCreateWithoutFeaturesInput {
  name: String;
  type: CarFeatureType;
}

export interface OfferUpdateWithWhereUniqueWithoutCarInput {
  where: OfferWhereUniqueInput;
  data: OfferUpdateWithoutCarDataInput;
}

export interface OfferCreateWithoutCarInput {
  creator: UserCreateOneInput;
  ad: AdCreateOneWithoutOffersInput;
  price: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonCreateManyInput;
  conversation?: ConversationCreateOneWithoutOfferInput;
}

export interface OfferUpdateWithoutCarDataInput {
  creator?: UserUpdateOneRequiredInput;
  ad?: AdUpdateOneRequiredWithoutOffersInput;
  price?: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonUpdateManyInput;
  conversation?: ConversationUpdateOneWithoutOfferInput;
}

export interface UserCreateInput {
  email: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password: String;
  location: String;
  birthDate?: DateCreateOneInput;
  gender?: Gender;
  permissions?: UserCreatepermissionsInput;
  ads?: AdCreateManyWithoutCreatorInput;
  cars?: CarCreateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationCreateManyWithoutBuyerInput;
  clientType: ClientType;
  language?: ClientLanguage;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface AdCreateWithoutCreatorInput {
  offers?: OfferCreateManyWithoutAdInput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  manufacturer?: ManufacturerCreateOneInput;
  model?: CarModelCreateOneInput;
  category?: CarCategoryCreateOneInput;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  features?: CarFeatureCreateManyInput;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface UserUpdateDataInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password?: String;
  location?: String;
  birthDate?: DateUpdateOneInput;
  gender?: Gender;
  permissions?: UserUpdatepermissionsInput;
  ads?: AdUpdateManyWithoutCreatorInput;
  cars?: CarUpdateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationUpdateManyWithoutBuyerInput;
  clientType?: ClientType;
  language?: ClientLanguage;
}

export interface OfferCreateWithoutAdInput {
  creator: UserCreateOneInput;
  car: CarCreateOneWithoutOffersInput;
  price: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonCreateManyInput;
  conversation?: ConversationCreateOneWithoutOfferInput;
}

export interface AdUpdateManyWithoutCreatorInput {
  create?: AdCreateWithoutCreatorInput[] | AdCreateWithoutCreatorInput;
  delete?: AdWhereUniqueInput[] | AdWhereUniqueInput;
  connect?: AdWhereUniqueInput[] | AdWhereUniqueInput;
  set?: AdWhereUniqueInput[] | AdWhereUniqueInput;
  disconnect?: AdWhereUniqueInput[] | AdWhereUniqueInput;
  update?:
    | AdUpdateWithWhereUniqueWithoutCreatorInput[]
    | AdUpdateWithWhereUniqueWithoutCreatorInput;
  upsert?:
    | AdUpsertWithWhereUniqueWithoutCreatorInput[]
    | AdUpsertWithWhereUniqueWithoutCreatorInput;
  deleteMany?: AdScalarWhereInput[] | AdScalarWhereInput;
  updateMany?:
    | AdUpdateManyWithWhereNestedInput[]
    | AdUpdateManyWithWhereNestedInput;
}

export interface CarCreateWithoutOffersInput {
  owner: UserCreateOneWithoutCarsInput;
  manufacturer: ManufacturerCreateOneInput;
  model: CarModelCreateOneInput;
  category: CarCategoryCreateOneInput;
  description?: String;
  year: Int;
  mileage: Int;
  photos?: CarCreatephotosInput;
  features?: CarFeatureCreateManyInput;
  status?: CarStatus;
}

export interface AdUpdateWithWhereUniqueWithoutCreatorInput {
  where: AdWhereUniqueInput;
  data: AdUpdateWithoutCreatorDataInput;
}

export interface UserCreateWithoutCarsInput {
  email: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password: String;
  location: String;
  birthDate?: DateCreateOneInput;
  gender?: Gender;
  permissions?: UserCreatepermissionsInput;
  ads?: AdCreateManyWithoutCreatorInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationCreateManyWithoutBuyerInput;
  clientType: ClientType;
  language?: ClientLanguage;
}

export interface AdUpdateWithoutCreatorDataInput {
  offers?: OfferUpdateManyWithoutAdInput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  manufacturer?: ManufacturerUpdateOneInput;
  model?: CarModelUpdateOneInput;
  category?: CarCategoryUpdateOneInput;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  features?: CarFeatureUpdateManyInput;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface ConversationCreateWithoutBuyerInput {
  offer: OfferCreateOneWithoutConversationInput;
  seller: UserCreateOneInput;
  messages?: MessageCreateManyWithoutConversationInput;
  status?: ConversationStatus;
}

export interface OfferUpdateManyWithoutAdInput {
  create?: OfferCreateWithoutAdInput[] | OfferCreateWithoutAdInput;
  delete?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  connect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  set?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  disconnect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
  update?:
    | OfferUpdateWithWhereUniqueWithoutAdInput[]
    | OfferUpdateWithWhereUniqueWithoutAdInput;
  upsert?:
    | OfferUpsertWithWhereUniqueWithoutAdInput[]
    | OfferUpsertWithWhereUniqueWithoutAdInput;
  deleteMany?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  updateMany?:
    | OfferUpdateManyWithWhereNestedInput[]
    | OfferUpdateManyWithWhereNestedInput;
}

export interface CarFeatureWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  category?: CarFeatureCategoryWhereInput;
  AND?: CarFeatureWhereInput[] | CarFeatureWhereInput;
  OR?: CarFeatureWhereInput[] | CarFeatureWhereInput;
  NOT?: CarFeatureWhereInput[] | CarFeatureWhereInput;
}

export interface OfferUpdateWithWhereUniqueWithoutAdInput {
  where: OfferWhereUniqueInput;
  data: OfferUpdateWithoutAdDataInput;
}

export interface OfferSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OfferWhereInput;
  AND?: OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput;
  OR?: OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput;
  NOT?: OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput;
}

export interface OfferUpdateWithoutAdDataInput {
  creator?: UserUpdateOneRequiredInput;
  car?: CarUpdateOneRequiredWithoutOffersInput;
  price?: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonUpdateManyInput;
  conversation?: ConversationUpdateOneWithoutOfferInput;
}

export interface DateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DateWhereInput;
  AND?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput;
  OR?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput;
  NOT?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput;
}

export interface CarUpdateOneRequiredWithoutOffersInput {
  create?: CarCreateWithoutOffersInput;
  update?: CarUpdateWithoutOffersDataInput;
  upsert?: CarUpsertWithoutOffersInput;
  connect?: CarWhereUniqueInput;
}

export interface CarModelSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarModelWhereInput;
  AND?: CarModelSubscriptionWhereInput[] | CarModelSubscriptionWhereInput;
  OR?: CarModelSubscriptionWhereInput[] | CarModelSubscriptionWhereInput;
  NOT?: CarModelSubscriptionWhereInput[] | CarModelSubscriptionWhereInput;
}

export interface CarUpdateWithoutOffersDataInput {
  owner?: UserUpdateOneRequiredWithoutCarsInput;
  manufacturer?: ManufacturerUpdateOneRequiredInput;
  model?: CarModelUpdateOneRequiredInput;
  category?: CarCategoryUpdateOneRequiredInput;
  description?: String;
  year?: Int;
  mileage?: Int;
  photos?: CarUpdatephotosInput;
  features?: CarFeatureUpdateManyInput;
  status?: CarStatus;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  companyName?: String;
  companyName_not?: String;
  companyName_in?: String[] | String;
  companyName_not_in?: String[] | String;
  companyName_lt?: String;
  companyName_lte?: String;
  companyName_gt?: String;
  companyName_gte?: String;
  companyName_contains?: String;
  companyName_not_contains?: String;
  companyName_starts_with?: String;
  companyName_not_starts_with?: String;
  companyName_ends_with?: String;
  companyName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  location?: String;
  location_not?: String;
  location_in?: String[] | String;
  location_not_in?: String[] | String;
  location_lt?: String;
  location_lte?: String;
  location_gt?: String;
  location_gte?: String;
  location_contains?: String;
  location_not_contains?: String;
  location_starts_with?: String;
  location_not_starts_with?: String;
  location_ends_with?: String;
  location_not_ends_with?: String;
  birthDate?: DateWhereInput;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  ads_every?: AdWhereInput;
  ads_some?: AdWhereInput;
  ads_none?: AdWhereInput;
  cars_every?: CarWhereInput;
  cars_some?: CarWhereInput;
  cars_none?: CarWhereInput;
  facebookID?: ID_Input;
  facebookID_not?: ID_Input;
  facebookID_in?: ID_Input[] | ID_Input;
  facebookID_not_in?: ID_Input[] | ID_Input;
  facebookID_lt?: ID_Input;
  facebookID_lte?: ID_Input;
  facebookID_gt?: ID_Input;
  facebookID_gte?: ID_Input;
  facebookID_contains?: ID_Input;
  facebookID_not_contains?: ID_Input;
  facebookID_starts_with?: ID_Input;
  facebookID_not_starts_with?: ID_Input;
  facebookID_ends_with?: ID_Input;
  facebookID_not_ends_with?: ID_Input;
  googleID?: ID_Input;
  googleID_not?: ID_Input;
  googleID_in?: ID_Input[] | ID_Input;
  googleID_not_in?: ID_Input[] | ID_Input;
  googleID_lt?: ID_Input;
  googleID_lte?: ID_Input;
  googleID_gt?: ID_Input;
  googleID_gte?: ID_Input;
  googleID_contains?: ID_Input;
  googleID_not_contains?: ID_Input;
  googleID_starts_with?: ID_Input;
  googleID_not_starts_with?: ID_Input;
  googleID_ends_with?: ID_Input;
  googleID_not_ends_with?: ID_Input;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  conversations_every?: ConversationWhereInput;
  conversations_some?: ConversationWhereInput;
  conversations_none?: ConversationWhereInput;
  clientType?: ClientType;
  clientType_not?: ClientType;
  clientType_in?: ClientType[] | ClientType;
  clientType_not_in?: ClientType[] | ClientType;
  language?: ClientLanguage;
  language_not?: ClientLanguage;
  language_in?: ClientLanguage[] | ClientLanguage;
  language_not_in?: ClientLanguage[] | ClientLanguage;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateOneRequiredWithoutCarsInput {
  create?: UserCreateWithoutCarsInput;
  update?: UserUpdateWithoutCarsDataInput;
  upsert?: UserUpsertWithoutCarsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password?: String;
  location?: String;
  gender?: Gender;
  permissions?: UserUpdatepermissionsInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  clientType?: ClientType;
  language?: ClientLanguage;
}

export interface UserUpdateWithoutCarsDataInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password?: String;
  location?: String;
  birthDate?: DateUpdateOneInput;
  gender?: Gender;
  permissions?: UserUpdatepermissionsInput;
  ads?: AdUpdateManyWithoutCreatorInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationUpdateManyWithoutBuyerInput;
  clientType?: ClientType;
  language?: ClientLanguage;
}

export interface OfferAddonUpdateInput {
  name?: String;
  rankValue?: Int;
}

export interface ConversationUpdateManyWithoutBuyerInput {
  create?:
    | ConversationCreateWithoutBuyerInput[]
    | ConversationCreateWithoutBuyerInput;
  delete?: ConversationWhereUniqueInput[] | ConversationWhereUniqueInput;
  connect?: ConversationWhereUniqueInput[] | ConversationWhereUniqueInput;
  set?: ConversationWhereUniqueInput[] | ConversationWhereUniqueInput;
  disconnect?: ConversationWhereUniqueInput[] | ConversationWhereUniqueInput;
  update?:
    | ConversationUpdateWithWhereUniqueWithoutBuyerInput[]
    | ConversationUpdateWithWhereUniqueWithoutBuyerInput;
  upsert?:
    | ConversationUpsertWithWhereUniqueWithoutBuyerInput[]
    | ConversationUpsertWithWhereUniqueWithoutBuyerInput;
  deleteMany?: ConversationScalarWhereInput[] | ConversationScalarWhereInput;
  updateMany?:
    | ConversationUpdateManyWithWhereNestedInput[]
    | ConversationUpdateManyWithWhereNestedInput;
}

export interface OfferUpdateInput {
  creator?: UserUpdateOneRequiredInput;
  ad?: AdUpdateOneRequiredWithoutOffersInput;
  car?: CarUpdateOneRequiredWithoutOffersInput;
  price?: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonUpdateManyInput;
  conversation?: ConversationUpdateOneWithoutOfferInput;
}

export interface ConversationUpdateWithWhereUniqueWithoutBuyerInput {
  where: ConversationWhereUniqueInput;
  data: ConversationUpdateWithoutBuyerDataInput;
}

export interface ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput;
  create: ConversationCreateWithoutMessagesInput;
}

export interface ConversationUpdateWithoutBuyerDataInput {
  offer?: OfferUpdateOneRequiredWithoutConversationInput;
  seller?: UserUpdateOneRequiredInput;
  messages?: MessageUpdateManyWithoutConversationInput;
  status?: ConversationStatus;
}

export interface MessageUpdateInput {
  sender?: UserUpdateOneRequiredInput;
  text?: String;
  image?: String;
  conversation?: ConversationUpdateOneRequiredWithoutMessagesInput;
}

export interface OfferUpdateOneRequiredWithoutConversationInput {
  create?: OfferCreateWithoutConversationInput;
  update?: OfferUpdateWithoutConversationDataInput;
  upsert?: OfferUpsertWithoutConversationInput;
  connect?: OfferWhereUniqueInput;
}

export interface MessageCreateInput {
  sender: UserCreateOneInput;
  text: String;
  image?: String;
  conversation: ConversationCreateOneWithoutMessagesInput;
}

export interface OfferUpdateWithoutConversationDataInput {
  creator?: UserUpdateOneRequiredInput;
  ad?: AdUpdateOneRequiredWithoutOffersInput;
  car?: CarUpdateOneRequiredWithoutOffersInput;
  price?: Float;
  status?: OfferStatus;
  finalRank?: Int;
  addons?: OfferAddonUpdateManyInput;
}

export interface DateUpdateManyMutationInput {
  day?: Int;
  month?: Int;
  year?: Int;
}

export interface AdUpdateOneRequiredWithoutOffersInput {
  create?: AdCreateWithoutOffersInput;
  update?: AdUpdateWithoutOffersDataInput;
  upsert?: AdUpsertWithoutOffersInput;
  connect?: AdWhereUniqueInput;
}

export interface CarModelUpdateManyMutationInput {
  name?: String;
}

export interface AdUpdateWithoutOffersDataInput {
  creator?: UserUpdateOneRequiredWithoutAdsInput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  manufacturer?: ManufacturerUpdateOneInput;
  model?: CarModelUpdateOneInput;
  category?: CarCategoryUpdateOneInput;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  features?: CarFeatureUpdateManyInput;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface CarFeatureUpsertWithWhereUniqueWithoutCategoryInput {
  where: CarFeatureWhereUniqueInput;
  update: CarFeatureUpdateWithoutCategoryDataInput;
  create: CarFeatureCreateWithoutCategoryInput;
}

export interface ManufacturerUpdateOneInput {
  create?: ManufacturerCreateInput;
  update?: ManufacturerUpdateDataInput;
  upsert?: ManufacturerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ManufacturerWhereUniqueInput;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarModelUpdateOneInput {
  create?: CarModelCreateInput;
  update?: CarModelUpdateDataInput;
  upsert?: CarModelUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CarModelWhereUniqueInput;
}

export type OfferWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarCategoryUpdateOneInput {
  create?: CarCategoryCreateInput;
  update?: CarCategoryUpdateDataInput;
  upsert?: CarCategoryUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CarCategoryWhereUniqueInput;
}

export type OfferAddonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AdUpsertWithoutOffersInput {
  update: AdUpdateWithoutOffersDataInput;
  create: AdCreateWithoutOffersInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  facebookID?: ID_Input;
  googleID?: ID_Input;
}>;

export interface OfferAddonUpdateManyInput {
  create?: OfferAddonCreateInput[] | OfferAddonCreateInput;
  update?:
    | OfferAddonUpdateWithWhereUniqueNestedInput[]
    | OfferAddonUpdateWithWhereUniqueNestedInput;
  upsert?:
    | OfferAddonUpsertWithWhereUniqueNestedInput[]
    | OfferAddonUpsertWithWhereUniqueNestedInput;
  delete?: OfferAddonWhereUniqueInput[] | OfferAddonWhereUniqueInput;
  connect?: OfferAddonWhereUniqueInput[] | OfferAddonWhereUniqueInput;
  set?: OfferAddonWhereUniqueInput[] | OfferAddonWhereUniqueInput;
  disconnect?: OfferAddonWhereUniqueInput[] | OfferAddonWhereUniqueInput;
  deleteMany?: OfferAddonScalarWhereInput[] | OfferAddonScalarWhereInput;
  updateMany?:
    | OfferAddonUpdateManyWithWhereNestedInput[]
    | OfferAddonUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutAdsInput {
  update: UserUpdateWithoutAdsDataInput;
  create: UserCreateWithoutAdsInput;
}

export interface OfferAddonUpdateWithWhereUniqueNestedInput {
  where: OfferAddonWhereUniqueInput;
  data: OfferAddonUpdateDataInput;
}

export interface UserCreateWithoutAdsInput {
  email: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password: String;
  location: String;
  birthDate?: DateCreateOneInput;
  gender?: Gender;
  permissions?: UserCreatepermissionsInput;
  cars?: CarCreateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationCreateManyWithoutBuyerInput;
  clientType: ClientType;
  language?: ClientLanguage;
}

export interface OfferAddonUpdateDataInput {
  name?: String;
  rankValue?: Int;
}

export interface CarCreateManyWithoutOwnerInput {
  create?: CarCreateWithoutOwnerInput[] | CarCreateWithoutOwnerInput;
  connect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
}

export interface OfferAddonUpsertWithWhereUniqueNestedInput {
  where: OfferAddonWhereUniqueInput;
  update: OfferAddonUpdateDataInput;
  create: OfferAddonCreateInput;
}

export interface CarModelCreateManyInput {
  create?: CarModelCreateInput[] | CarModelCreateInput;
  connect?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
}

export interface OfferAddonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rankValue?: Int;
  rankValue_not?: Int;
  rankValue_in?: Int[] | Int;
  rankValue_not_in?: Int[] | Int;
  rankValue_lt?: Int;
  rankValue_lte?: Int;
  rankValue_gt?: Int;
  rankValue_gte?: Int;
  AND?: OfferAddonScalarWhereInput[] | OfferAddonScalarWhereInput;
  OR?: OfferAddonScalarWhereInput[] | OfferAddonScalarWhereInput;
  NOT?: OfferAddonScalarWhereInput[] | OfferAddonScalarWhereInput;
}

export interface CarCategoryCreateInput {
  name: String;
}

export interface OfferAddonUpdateManyWithWhereNestedInput {
  where: OfferAddonScalarWhereInput;
  data: OfferAddonUpdateManyDataInput;
}

export interface CarFeatureCategoryCreateOneWithoutFeaturesInput {
  create?: CarFeatureCategoryCreateWithoutFeaturesInput;
  connect?: CarFeatureCategoryWhereUniqueInput;
}

export interface OfferAddonUpdateManyDataInput {
  name?: String;
  rankValue?: Int;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface OfferUpsertWithoutConversationInput {
  update: OfferUpdateWithoutConversationDataInput;
  create: OfferCreateWithoutConversationInput;
}

export interface OfferCreateManyWithoutAdInput {
  create?: OfferCreateWithoutAdInput[] | OfferCreateWithoutAdInput;
  connect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
}

export interface MessageUpdateManyWithoutConversationInput {
  create?:
    | MessageCreateWithoutConversationInput[]
    | MessageCreateWithoutConversationInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    | MessageUpdateWithWhereUniqueWithoutConversationInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    | MessageUpsertWithWhereUniqueWithoutConversationInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutCarsInput {
  create?: UserCreateWithoutCarsInput;
  connect?: UserWhereUniqueInput;
}

export interface MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutConversationDataInput;
}

export interface OfferWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  creator?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  ad?: AdWhereInput;
  car?: CarWhereInput;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  status?: OfferStatus;
  status_not?: OfferStatus;
  status_in?: OfferStatus[] | OfferStatus;
  status_not_in?: OfferStatus[] | OfferStatus;
  finalRank?: Int;
  finalRank_not?: Int;
  finalRank_in?: Int[] | Int;
  finalRank_not_in?: Int[] | Int;
  finalRank_lt?: Int;
  finalRank_lte?: Int;
  finalRank_gt?: Int;
  finalRank_gte?: Int;
  addons_every?: OfferAddonWhereInput;
  addons_some?: OfferAddonWhereInput;
  addons_none?: OfferAddonWhereInput;
  conversation?: ConversationWhereInput;
  AND?: OfferWhereInput[] | OfferWhereInput;
  OR?: OfferWhereInput[] | OfferWhereInput;
  NOT?: OfferWhereInput[] | OfferWhereInput;
}

export interface MessageUpdateWithoutConversationDataInput {
  sender?: UserUpdateOneRequiredInput;
  text?: String;
  image?: String;
}

export interface CarModelWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CarModelWhereInput[] | CarModelWhereInput;
  OR?: CarModelWhereInput[] | CarModelWhereInput;
  NOT?: CarModelWhereInput[] | CarModelWhereInput;
}

export interface MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutConversationDataInput;
  create: MessageCreateWithoutConversationInput;
}

export interface DateWhereInput {
  day?: Int;
  day_not?: Int;
  day_in?: Int[] | Int;
  day_not_in?: Int[] | Int;
  day_lt?: Int;
  day_lte?: Int;
  day_gt?: Int;
  day_gte?: Int;
  month?: Int;
  month_not?: Int;
  month_in?: Int[] | Int;
  month_not_in?: Int[] | Int;
  month_lt?: Int;
  month_lte?: Int;
  month_gt?: Int;
  month_gte?: Int;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  AND?: DateWhereInput[] | DateWhereInput;
  OR?: DateWhereInput[] | DateWhereInput;
  NOT?: DateWhereInput[] | DateWhereInput;
}

export interface MessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  AND?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  OR?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  NOT?: MessageScalarWhereInput[] | MessageScalarWhereInput;
}

export interface UserUpdateInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password?: String;
  location?: String;
  birthDate?: DateUpdateOneInput;
  gender?: Gender;
  permissions?: UserUpdatepermissionsInput;
  ads?: AdUpdateManyWithoutCreatorInput;
  cars?: CarUpdateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  conversations?: ConversationUpdateManyWithoutBuyerInput;
  clientType?: ClientType;
  language?: ClientLanguage;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export type CarFeatureWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MessageUpdateManyDataInput {
  text?: String;
  image?: String;
}

export interface ConversationCreateOneWithoutMessagesInput {
  create?: ConversationCreateWithoutMessagesInput;
  connect?: ConversationWhereUniqueInput;
}

export interface ConversationUpsertWithWhereUniqueWithoutBuyerInput {
  where: ConversationWhereUniqueInput;
  update: ConversationUpdateWithoutBuyerDataInput;
  create: ConversationCreateWithoutBuyerInput;
}

export interface ConversationUpdateInput {
  offer?: OfferUpdateOneRequiredWithoutConversationInput;
  buyer?: UserUpdateOneRequiredWithoutConversationsInput;
  seller?: UserUpdateOneRequiredInput;
  messages?: MessageUpdateManyWithoutConversationInput;
  status?: ConversationStatus;
}

export interface ConversationScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  status?: ConversationStatus;
  status_not?: ConversationStatus;
  status_in?: ConversationStatus[] | ConversationStatus;
  status_not_in?: ConversationStatus[] | ConversationStatus;
  AND?: ConversationScalarWhereInput[] | ConversationScalarWhereInput;
  OR?: ConversationScalarWhereInput[] | ConversationScalarWhereInput;
  NOT?: ConversationScalarWhereInput[] | ConversationScalarWhereInput;
}

export interface CarFeatureUpdateWithWhereUniqueWithoutCategoryInput {
  where: CarFeatureWhereUniqueInput;
  data: CarFeatureUpdateWithoutCategoryDataInput;
}

export interface ConversationUpdateManyWithWhereNestedInput {
  where: ConversationScalarWhereInput;
  data: ConversationUpdateManyDataInput;
}

export interface CarFeatureUpdateManyMutationInput {
  name?: String;
}

export interface ConversationUpdateManyDataInput {
  status?: ConversationStatus;
}

export interface CarCreateInput {
  owner: UserCreateOneWithoutCarsInput;
  manufacturer: ManufacturerCreateOneInput;
  model: CarModelCreateOneInput;
  category: CarCategoryCreateOneInput;
  description?: String;
  year: Int;
  mileage: Int;
  photos?: CarCreatephotosInput;
  features?: CarFeatureCreateManyInput;
  status?: CarStatus;
  offers?: OfferCreateManyWithoutCarInput;
}

export interface UserUpsertWithoutCarsInput {
  update: UserUpdateWithoutCarsDataInput;
  create: UserCreateWithoutCarsInput;
}

export interface DateCreateInput {
  day: Int;
  month: Int;
  year: Int;
}

export interface CarUpsertWithoutOffersInput {
  update: CarUpdateWithoutOffersDataInput;
  create: CarCreateWithoutOffersInput;
}

export interface CarModelCreateOneInput {
  create?: CarModelCreateInput;
  connect?: CarModelWhereUniqueInput;
}

export interface ConversationUpdateOneWithoutOfferInput {
  create?: ConversationCreateWithoutOfferInput;
  update?: ConversationUpdateWithoutOfferDataInput;
  upsert?: ConversationUpsertWithoutOfferInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ConversationWhereUniqueInput;
}

export interface OfferCreateManyWithoutCarInput {
  create?: OfferCreateWithoutCarInput[] | OfferCreateWithoutCarInput;
  connect?: OfferWhereUniqueInput[] | OfferWhereUniqueInput;
}

export interface ConversationUpdateWithoutOfferDataInput {
  buyer?: UserUpdateOneRequiredWithoutConversationsInput;
  seller?: UserUpdateOneRequiredInput;
  messages?: MessageUpdateManyWithoutConversationInput;
  status?: ConversationStatus;
}

export interface CarCreateOneWithoutOffersInput {
  create?: CarCreateWithoutOffersInput;
  connect?: CarWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutConversationsInput {
  create?: UserCreateWithoutConversationsInput;
  update?: UserUpdateWithoutConversationsDataInput;
  upsert?: UserUpsertWithoutConversationsInput;
  connect?: UserWhereUniqueInput;
}

export interface OfferAddonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OfferAddonWhereInput;
  AND?: OfferAddonSubscriptionWhereInput[] | OfferAddonSubscriptionWhereInput;
  OR?: OfferAddonSubscriptionWhereInput[] | OfferAddonSubscriptionWhereInput;
  NOT?: OfferAddonSubscriptionWhereInput[] | OfferAddonSubscriptionWhereInput;
}

export interface UserUpdateWithoutConversationsDataInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password?: String;
  location?: String;
  birthDate?: DateUpdateOneInput;
  gender?: Gender;
  permissions?: UserUpdatepermissionsInput;
  ads?: AdUpdateManyWithoutCreatorInput;
  cars?: CarUpdateManyWithoutOwnerInput;
  facebookID?: ID_Input;
  googleID?: ID_Input;
  resetToken?: String;
  resetTokenExpiry?: Float;
  clientType?: ClientType;
  language?: ClientLanguage;
}

export interface CarSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarWhereInput;
  AND?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  OR?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  NOT?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
}

export interface UserUpsertWithoutConversationsInput {
  update: UserUpdateWithoutConversationsDataInput;
  create: UserCreateWithoutConversationsInput;
}

export type CarFeatureCategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface ConversationUpsertWithoutOfferInput {
  update: ConversationUpdateWithoutOfferDataInput;
  create: ConversationCreateWithoutOfferInput;
}

export interface CarFeatureCategoryUpdateManyMutationInput {
  name?: String;
  type?: CarFeatureType;
}

export interface OfferUpsertWithWhereUniqueWithoutAdInput {
  where: OfferWhereUniqueInput;
  update: OfferUpdateWithoutAdDataInput;
  create: OfferCreateWithoutAdInput;
}

export interface CarCategoryUpdateInput {
  name?: String;
}

export interface OfferScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  status?: OfferStatus;
  status_not?: OfferStatus;
  status_in?: OfferStatus[] | OfferStatus;
  status_not_in?: OfferStatus[] | OfferStatus;
  finalRank?: Int;
  finalRank_not?: Int;
  finalRank_in?: Int[] | Int;
  finalRank_not_in?: Int[] | Int;
  finalRank_lt?: Int;
  finalRank_lte?: Int;
  finalRank_gt?: Int;
  finalRank_gte?: Int;
  AND?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  OR?: OfferScalarWhereInput[] | OfferScalarWhereInput;
  NOT?: OfferScalarWhereInput[] | OfferScalarWhereInput;
}

export interface ManufacturerCreateOneInput {
  create?: ManufacturerCreateInput;
  connect?: ManufacturerWhereUniqueInput;
}

export interface OfferUpdateManyWithWhereNestedInput {
  where: OfferScalarWhereInput;
  data: OfferUpdateManyDataInput;
}

export interface AdCreateManyWithoutCreatorInput {
  create?: AdCreateWithoutCreatorInput[] | AdCreateWithoutCreatorInput;
  connect?: AdWhereUniqueInput[] | AdWhereUniqueInput;
}

export interface OfferUpdateManyDataInput {
  price?: Float;
  status?: OfferStatus;
  finalRank?: Int;
}

export interface ConversationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ConversationWhereInput;
  AND?:
    | ConversationSubscriptionWhereInput[]
    | ConversationSubscriptionWhereInput;
  OR?:
    | ConversationSubscriptionWhereInput[]
    | ConversationSubscriptionWhereInput;
  NOT?:
    | ConversationSubscriptionWhereInput[]
    | ConversationSubscriptionWhereInput;
}

export interface AdUpsertWithWhereUniqueWithoutCreatorInput {
  where: AdWhereUniqueInput;
  update: AdUpdateWithoutCreatorDataInput;
  create: AdCreateWithoutCreatorInput;
}

export interface ManufacturerUpdateInput {
  name?: String;
  models?: CarModelUpdateManyInput;
}

export interface AdScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  priceLowerBound?: Float;
  priceLowerBound_not?: Float;
  priceLowerBound_in?: Float[] | Float;
  priceLowerBound_not_in?: Float[] | Float;
  priceLowerBound_lt?: Float;
  priceLowerBound_lte?: Float;
  priceLowerBound_gt?: Float;
  priceLowerBound_gte?: Float;
  priceHigherBound?: Float;
  priceHigherBound_not?: Float;
  priceHigherBound_in?: Float[] | Float;
  priceHigherBound_not_in?: Float[] | Float;
  priceHigherBound_lt?: Float;
  priceHigherBound_lte?: Float;
  priceHigherBound_gt?: Float;
  priceHigherBound_gte?: Float;
  mileageLowerBound?: Int;
  mileageLowerBound_not?: Int;
  mileageLowerBound_in?: Int[] | Int;
  mileageLowerBound_not_in?: Int[] | Int;
  mileageLowerBound_lt?: Int;
  mileageLowerBound_lte?: Int;
  mileageLowerBound_gt?: Int;
  mileageLowerBound_gte?: Int;
  mileageHigherBound?: Int;
  mileageHigherBound_not?: Int;
  mileageHigherBound_in?: Int[] | Int;
  mileageHigherBound_not_in?: Int[] | Int;
  mileageHigherBound_lt?: Int;
  mileageHigherBound_lte?: Int;
  mileageHigherBound_gt?: Int;
  mileageHigherBound_gte?: Int;
  yearLowerBound?: Int;
  yearLowerBound_not?: Int;
  yearLowerBound_in?: Int[] | Int;
  yearLowerBound_not_in?: Int[] | Int;
  yearLowerBound_lt?: Int;
  yearLowerBound_lte?: Int;
  yearLowerBound_gt?: Int;
  yearLowerBound_gte?: Int;
  yearHigherBound?: Int;
  yearHigherBound_not?: Int;
  yearHigherBound_in?: Int[] | Int;
  yearHigherBound_not_in?: Int[] | Int;
  yearHigherBound_lt?: Int;
  yearHigherBound_lte?: Int;
  yearHigherBound_gt?: Int;
  yearHigherBound_gte?: Int;
  isUrgent?: Boolean;
  isUrgent_not?: Boolean;
  isFirst?: Boolean;
  isFirst_not?: Boolean;
  status?: AdStatus;
  status_not?: AdStatus;
  status_in?: AdStatus[] | AdStatus;
  status_not_in?: AdStatus[] | AdStatus;
  AND?: AdScalarWhereInput[] | AdScalarWhereInput;
  OR?: AdScalarWhereInput[] | AdScalarWhereInput;
  NOT?: AdScalarWhereInput[] | AdScalarWhereInput;
}

export interface AdCreateInput {
  creator: UserCreateOneWithoutAdsInput;
  offers?: OfferCreateManyWithoutAdInput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  manufacturer?: ManufacturerCreateOneInput;
  model?: CarModelCreateOneInput;
  category?: CarCategoryCreateOneInput;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  features?: CarFeatureCreateManyInput;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface OfferUpsertWithWhereUniqueWithoutCarInput {
  where: OfferWhereUniqueInput;
  update: OfferUpdateWithoutCarDataInput;
  create: OfferCreateWithoutCarInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AdUpdateManyDataInput {
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  isUrgent?: Boolean;
  isFirst?: Boolean;
  status?: AdStatus;
}

export interface AdUpdateManyWithWhereNestedInput {
  where: AdScalarWhereInput;
  data: AdUpdateManyDataInput;
}

export interface CarFeatureCreateManyInput {
  create?: CarFeatureCreateInput[] | CarFeatureCreateInput;
  connect?: CarFeatureWhereUniqueInput[] | CarFeatureWhereUniqueInput;
}

export interface CarFeatureCreateWithoutCategoryInput {
  name: String;
}

export interface AdWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  creator?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  offers_every?: OfferWhereInput;
  offers_some?: OfferWhereInput;
  offers_none?: OfferWhereInput;
  priceLowerBound?: Float;
  priceLowerBound_not?: Float;
  priceLowerBound_in?: Float[] | Float;
  priceLowerBound_not_in?: Float[] | Float;
  priceLowerBound_lt?: Float;
  priceLowerBound_lte?: Float;
  priceLowerBound_gt?: Float;
  priceLowerBound_gte?: Float;
  priceHigherBound?: Float;
  priceHigherBound_not?: Float;
  priceHigherBound_in?: Float[] | Float;
  priceHigherBound_not_in?: Float[] | Float;
  priceHigherBound_lt?: Float;
  priceHigherBound_lte?: Float;
  priceHigherBound_gt?: Float;
  priceHigherBound_gte?: Float;
  manufacturer?: ManufacturerWhereInput;
  model?: CarModelWhereInput;
  category?: CarCategoryWhereInput;
  mileageLowerBound?: Int;
  mileageLowerBound_not?: Int;
  mileageLowerBound_in?: Int[] | Int;
  mileageLowerBound_not_in?: Int[] | Int;
  mileageLowerBound_lt?: Int;
  mileageLowerBound_lte?: Int;
  mileageLowerBound_gt?: Int;
  mileageLowerBound_gte?: Int;
  mileageHigherBound?: Int;
  mileageHigherBound_not?: Int;
  mileageHigherBound_in?: Int[] | Int;
  mileageHigherBound_not_in?: Int[] | Int;
  mileageHigherBound_lt?: Int;
  mileageHigherBound_lte?: Int;
  mileageHigherBound_gt?: Int;
  mileageHigherBound_gte?: Int;
  yearLowerBound?: Int;
  yearLowerBound_not?: Int;
  yearLowerBound_in?: Int[] | Int;
  yearLowerBound_not_in?: Int[] | Int;
  yearLowerBound_lt?: Int;
  yearLowerBound_lte?: Int;
  yearLowerBound_gt?: Int;
  yearLowerBound_gte?: Int;
  yearHigherBound?: Int;
  yearHigherBound_not?: Int;
  yearHigherBound_in?: Int[] | Int;
  yearHigherBound_not_in?: Int[] | Int;
  yearHigherBound_lt?: Int;
  yearHigherBound_lte?: Int;
  yearHigherBound_gt?: Int;
  yearHigherBound_gte?: Int;
  features_every?: CarFeatureWhereInput;
  features_some?: CarFeatureWhereInput;
  features_none?: CarFeatureWhereInput;
  isUrgent?: Boolean;
  isUrgent_not?: Boolean;
  isFirst?: Boolean;
  isFirst_not?: Boolean;
  status?: AdStatus;
  status_not?: AdStatus;
  status_in?: AdStatus[] | AdStatus;
  status_not_in?: AdStatus[] | AdStatus;
  AND?: AdWhereInput[] | AdWhereInput;
  OR?: AdWhereInput[] | AdWhereInput;
  NOT?: AdWhereInput[] | AdWhereInput;
}

export interface ConversationCreateManyWithoutBuyerInput {
  create?:
    | ConversationCreateWithoutBuyerInput[]
    | ConversationCreateWithoutBuyerInput;
  connect?: ConversationWhereUniqueInput[] | ConversationWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password: String;
  location: String;
  gender?: Gender;
  permissions: Permission[];
  facebookID?: ID_Output;
  googleID?: ID_Output;
  resetToken?: String;
  resetTokenExpiry?: Float;
  clientType: ClientType;
  language?: ClientLanguage;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  companyName: () => Promise<String>;
  password: () => Promise<String>;
  location: () => Promise<String>;
  gender: () => Promise<Gender>;
  permissions: () => Promise<Permission[]>;
  facebookID: () => Promise<ID_Output>;
  googleID: () => Promise<ID_Output>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  clientType: () => Promise<ClientType>;
  language: () => Promise<ClientLanguage>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  facebookID: () => Promise<AsyncIterator<ID_Output>>;
  googleID: () => Promise<AsyncIterator<ID_Output>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  clientType: () => Promise<AsyncIterator<ClientType>>;
  language: () => Promise<AsyncIterator<ClientLanguage>>;
}

export interface CarCategoryEdge {
  node: CarCategory;
  cursor: String;
}

export interface CarCategoryEdgePromise
  extends Promise<CarCategoryEdge>,
    Fragmentable {
  node: <T = CarCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarCategoryEdgeSubscription
  extends Promise<AsyncIterator<CarCategoryEdge>>,
    Fragmentable {
  node: <T = CarCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  price: Float;
  status: OfferStatus;
  finalRank?: Int;
}

export interface OfferPreviousValuesPromise
  extends Promise<OfferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  price: () => Promise<Float>;
  status: () => Promise<OfferStatus>;
  finalRank: () => Promise<Int>;
}

export interface OfferPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  price: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<OfferStatus>>;
  finalRank: () => Promise<AsyncIterator<Int>>;
}

export interface CarCategoryConnection {
  pageInfo: PageInfo;
  edges: CarCategoryEdge[];
}

export interface CarCategoryConnectionPromise
  extends Promise<CarCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarCategoryEdge>>() => T;
  aggregate: <T = AggregateCarCategoryPromise>() => T;
}

export interface CarCategoryConnectionSubscription
  extends Promise<AsyncIterator<CarCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarCategorySubscription>() => T;
}

export interface CarEdge {
  node: Car;
  cursor: String;
}

export interface CarEdgePromise extends Promise<CarEdge>, Fragmentable {
  node: <T = CarPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarEdgeSubscription
  extends Promise<AsyncIterator<CarEdge>>,
    Fragmentable {
  node: <T = CarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCar {
  count: Int;
}

export interface AggregateCarPromise
  extends Promise<AggregateCar>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarSubscription
  extends Promise<AsyncIterator<AggregateCar>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Manufacturer {
  id: ID_Output;
  name: String;
}

export interface ManufacturerPromise
  extends Promise<Manufacturer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  models: <T = FragmentableArray<CarModel>>(
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ManufacturerSubscription
  extends Promise<AsyncIterator<Manufacturer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  models: <T = Promise<AsyncIterator<CarModelSubscription>>>(
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CarConnection {
  pageInfo: PageInfo;
  edges: CarEdge[];
}

export interface CarConnectionPromise
  extends Promise<CarConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarEdge>>() => T;
  aggregate: <T = AggregateCarPromise>() => T;
}

export interface CarConnectionSubscription
  extends Promise<AsyncIterator<CarConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateAd {
  count: Int;
}

export interface AggregateAdPromise extends Promise<AggregateAd>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdSubscription
  extends Promise<AsyncIterator<AggregateAd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateOfferAddon {
  count: Int;
}

export interface AggregateOfferAddonPromise
  extends Promise<AggregateOfferAddon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferAddonSubscription
  extends Promise<AsyncIterator<AggregateOfferAddon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdEdge {
  node: Ad;
  cursor: String;
}

export interface AdEdgePromise extends Promise<AdEdge>, Fragmentable {
  node: <T = AdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdEdgeSubscription
  extends Promise<AsyncIterator<AdEdge>>,
    Fragmentable {
  node: <T = AdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferAddonConnection {
  pageInfo: PageInfo;
  edges: OfferAddonEdge[];
}

export interface OfferAddonConnectionPromise
  extends Promise<OfferAddonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferAddonEdge>>() => T;
  aggregate: <T = AggregateOfferAddonPromise>() => T;
}

export interface OfferAddonConnectionSubscription
  extends Promise<AsyncIterator<OfferAddonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferAddonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferAddonSubscription>() => T;
}

export interface Ad {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  isUrgent: Boolean;
  isFirst: Boolean;
  status: AdStatus;
}

export interface AdPromise extends Promise<Ad>, Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  offers: <T = FragmentableArray<Offer>>(
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  priceLowerBound: () => Promise<Float>;
  priceHigherBound: () => Promise<Float>;
  manufacturer: <T = ManufacturerPromise>() => T;
  model: <T = CarModelPromise>() => T;
  category: <T = CarCategoryPromise>() => T;
  mileageLowerBound: () => Promise<Int>;
  mileageHigherBound: () => Promise<Int>;
  yearLowerBound: () => Promise<Int>;
  yearHigherBound: () => Promise<Int>;
  features: <T = FragmentableArray<CarFeature>>(
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isUrgent: () => Promise<Boolean>;
  isFirst: () => Promise<Boolean>;
  status: () => Promise<AdStatus>;
}

export interface AdSubscription
  extends Promise<AsyncIterator<Ad>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  creator: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  offers: <T = Promise<AsyncIterator<OfferSubscription>>>(
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  priceLowerBound: () => Promise<AsyncIterator<Float>>;
  priceHigherBound: () => Promise<AsyncIterator<Float>>;
  manufacturer: <T = ManufacturerSubscription>() => T;
  model: <T = CarModelSubscription>() => T;
  category: <T = CarCategorySubscription>() => T;
  mileageLowerBound: () => Promise<AsyncIterator<Int>>;
  mileageHigherBound: () => Promise<AsyncIterator<Int>>;
  yearLowerBound: () => Promise<AsyncIterator<Int>>;
  yearHigherBound: () => Promise<AsyncIterator<Int>>;
  features: <T = Promise<AsyncIterator<CarFeatureSubscription>>>(
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isUrgent: () => Promise<AsyncIterator<Boolean>>;
  isFirst: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<AdStatus>>;
}

export interface OfferEdge {
  node: Offer;
  cursor: String;
}

export interface OfferEdgePromise extends Promise<OfferEdge>, Fragmentable {
  node: <T = OfferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferEdgeSubscription
  extends Promise<AsyncIterator<OfferEdge>>,
    Fragmentable {
  node: <T = OfferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdSubscriptionPayload {
  mutation: MutationType;
  node: Ad;
  updatedFields: String[];
  previousValues: AdPreviousValues;
}

export interface AdSubscriptionPayloadPromise
  extends Promise<AdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdPreviousValuesPromise>() => T;
}

export interface AdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdPreviousValuesSubscription>() => T;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  priceLowerBound?: Float;
  priceHigherBound?: Float;
  mileageLowerBound?: Int;
  mileageHigherBound?: Int;
  yearLowerBound?: Int;
  yearHigherBound?: Int;
  isUrgent: Boolean;
  isFirst: Boolean;
  status: AdStatus;
}

export interface AdPreviousValuesPromise
  extends Promise<AdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  priceLowerBound: () => Promise<Float>;
  priceHigherBound: () => Promise<Float>;
  mileageLowerBound: () => Promise<Int>;
  mileageHigherBound: () => Promise<Int>;
  yearLowerBound: () => Promise<Int>;
  yearHigherBound: () => Promise<Int>;
  isUrgent: () => Promise<Boolean>;
  isFirst: () => Promise<Boolean>;
  status: () => Promise<AdStatus>;
}

export interface AdPreviousValuesSubscription
  extends Promise<AsyncIterator<AdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  priceLowerBound: () => Promise<AsyncIterator<Float>>;
  priceHigherBound: () => Promise<AsyncIterator<Float>>;
  mileageLowerBound: () => Promise<AsyncIterator<Int>>;
  mileageHigherBound: () => Promise<AsyncIterator<Int>>;
  yearLowerBound: () => Promise<AsyncIterator<Int>>;
  yearHigherBound: () => Promise<AsyncIterator<Int>>;
  isUrgent: () => Promise<AsyncIterator<Boolean>>;
  isFirst: () => Promise<AsyncIterator<Boolean>>;
  status: () => Promise<AsyncIterator<AdStatus>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ManufacturerEdge {
  node: Manufacturer;
  cursor: String;
}

export interface ManufacturerEdgePromise
  extends Promise<ManufacturerEdge>,
    Fragmentable {
  node: <T = ManufacturerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ManufacturerEdgeSubscription
  extends Promise<AsyncIterator<ManufacturerEdge>>,
    Fragmentable {
  node: <T = ManufacturerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarSubscriptionPayload {
  mutation: MutationType;
  node: Car;
  updatedFields: String[];
  previousValues: CarPreviousValues;
}

export interface CarSubscriptionPayloadPromise
  extends Promise<CarSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarPreviousValuesPromise>() => T;
}

export interface CarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarPreviousValuesSubscription>() => T;
}

export interface OfferAddonPreviousValues {
  id: ID_Output;
  name: String;
  rankValue: Int;
}

export interface OfferAddonPreviousValuesPromise
  extends Promise<OfferAddonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rankValue: () => Promise<Int>;
}

export interface OfferAddonPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferAddonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rankValue: () => Promise<AsyncIterator<Int>>;
}

export interface CarPreviousValues {
  id: ID_Output;
  description?: String;
  year: Int;
  mileage: Int;
  photos: String[];
  status: CarStatus;
}

export interface CarPreviousValuesPromise
  extends Promise<CarPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  year: () => Promise<Int>;
  mileage: () => Promise<Int>;
  photos: () => Promise<String[]>;
  status: () => Promise<CarStatus>;
}

export interface CarPreviousValuesSubscription
  extends Promise<AsyncIterator<CarPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  photos: () => Promise<AsyncIterator<String[]>>;
  status: () => Promise<AsyncIterator<CarStatus>>;
}

export interface DateEdge {
  node: Date;
  cursor: String;
}

export interface DateEdgePromise extends Promise<DateEdge>, Fragmentable {
  node: <T = DatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DateEdgeSubscription
  extends Promise<AsyncIterator<DateEdge>>,
    Fragmentable {
  node: <T = DateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdConnection {
  pageInfo: PageInfo;
  edges: AdEdge[];
}

export interface AdConnectionPromise
  extends Promise<AdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdEdge>>() => T;
  aggregate: <T = AggregateAdPromise>() => T;
}

export interface AdConnectionSubscription
  extends Promise<AsyncIterator<AdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdSubscription>() => T;
}

export interface Date {
  day: Int;
  month: Int;
  year: Int;
}

export interface DatePromise extends Promise<Date>, Fragmentable {
  day: () => Promise<Int>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface DateSubscription
  extends Promise<AsyncIterator<Date>>,
    Fragmentable {
  day: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface CarCategorySubscriptionPayload {
  mutation: MutationType;
  node: CarCategory;
  updatedFields: String[];
  previousValues: CarCategoryPreviousValues;
}

export interface CarCategorySubscriptionPayloadPromise
  extends Promise<CarCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarCategoryPreviousValuesPromise>() => T;
}

export interface CarCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarCategoryPreviousValuesSubscription>() => T;
}

export interface ConversationEdge {
  node: Conversation;
  cursor: String;
}

export interface ConversationEdgePromise
  extends Promise<ConversationEdge>,
    Fragmentable {
  node: <T = ConversationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConversationEdgeSubscription
  extends Promise<AsyncIterator<ConversationEdge>>,
    Fragmentable {
  node: <T = ConversationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarCategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CarCategoryPreviousValuesPromise
  extends Promise<CarCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CarCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCarModel {
  count: Int;
}

export interface AggregateCarModelPromise
  extends Promise<AggregateCarModel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarModelSubscription
  extends Promise<AsyncIterator<AggregateCarModel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Message {
  id: ID_Output;
  text: String;
  image?: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  text: () => Promise<String>;
  image: () => Promise<String>;
  conversation: <T = ConversationPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  conversation: <T = ConversationSubscription>() => T;
}

export interface CarModelConnection {
  pageInfo: PageInfo;
  edges: CarModelEdge[];
}

export interface CarModelConnectionPromise
  extends Promise<CarModelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarModelEdge>>() => T;
  aggregate: <T = AggregateCarModelPromise>() => T;
}

export interface CarModelConnectionSubscription
  extends Promise<AsyncIterator<CarModelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarModelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarModelSubscription>() => T;
}

export interface CarFeatureSubscriptionPayload {
  mutation: MutationType;
  node: CarFeature;
  updatedFields: String[];
  previousValues: CarFeaturePreviousValues;
}

export interface CarFeatureSubscriptionPayloadPromise
  extends Promise<CarFeatureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarFeaturePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarFeaturePreviousValuesPromise>() => T;
}

export interface CarFeatureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarFeatureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarFeatureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarFeaturePreviousValuesSubscription>() => T;
}

export interface CarFeatureCategoryEdge {
  node: CarFeatureCategory;
  cursor: String;
}

export interface CarFeatureCategoryEdgePromise
  extends Promise<CarFeatureCategoryEdge>,
    Fragmentable {
  node: <T = CarFeatureCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarFeatureCategoryEdgeSubscription
  extends Promise<AsyncIterator<CarFeatureCategoryEdge>>,
    Fragmentable {
  node: <T = CarFeatureCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarFeaturePreviousValues {
  id: ID_Output;
  name: String;
}

export interface CarFeaturePreviousValuesPromise
  extends Promise<CarFeaturePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarFeaturePreviousValuesSubscription
  extends Promise<AsyncIterator<CarFeaturePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OfferAddonSubscriptionPayload {
  mutation: MutationType;
  node: OfferAddon;
  updatedFields: String[];
  previousValues: OfferAddonPreviousValues;
}

export interface OfferAddonSubscriptionPayloadPromise
  extends Promise<OfferAddonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferAddonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferAddonPreviousValuesPromise>() => T;
}

export interface OfferAddonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferAddonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferAddonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferAddonPreviousValuesSubscription>() => T;
}

export interface Conversation {
  id: ID_Output;
  status?: ConversationStatus;
}

export interface ConversationPromise
  extends Promise<Conversation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  offer: <T = OfferPromise>() => T;
  buyer: <T = UserPromise>() => T;
  seller: <T = UserPromise>() => T;
  messages: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<ConversationStatus>;
}

export interface ConversationSubscription
  extends Promise<AsyncIterator<Conversation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  offer: <T = OfferSubscription>() => T;
  buyer: <T = UserSubscription>() => T;
  seller: <T = UserSubscription>() => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<ConversationStatus>>;
}

export interface CarFeatureEdge {
  node: CarFeature;
  cursor: String;
}

export interface CarFeatureEdgePromise
  extends Promise<CarFeatureEdge>,
    Fragmentable {
  node: <T = CarFeaturePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarFeatureEdgeSubscription
  extends Promise<AsyncIterator<CarFeatureEdge>>,
    Fragmentable {
  node: <T = CarFeatureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarFeatureCategorySubscriptionPayload {
  mutation: MutationType;
  node: CarFeatureCategory;
  updatedFields: String[];
  previousValues: CarFeatureCategoryPreviousValues;
}

export interface CarFeatureCategorySubscriptionPayloadPromise
  extends Promise<CarFeatureCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarFeatureCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarFeatureCategoryPreviousValuesPromise>() => T;
}

export interface CarFeatureCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarFeatureCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarFeatureCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarFeatureCategoryPreviousValuesSubscription>() => T;
}

export interface AggregateCarCategory {
  count: Int;
}

export interface AggregateCarCategoryPromise
  extends Promise<AggregateCarCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarCategorySubscription
  extends Promise<AsyncIterator<AggregateCarCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarFeatureCategoryPreviousValues {
  id: ID_Output;
  name: String;
  type: CarFeatureType;
}

export interface CarFeatureCategoryPreviousValuesPromise
  extends Promise<CarFeatureCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<CarFeatureType>;
}

export interface CarFeatureCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CarFeatureCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<CarFeatureType>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferAddon {
  id: ID_Output;
  name: String;
  rankValue: Int;
}

export interface OfferAddonPromise extends Promise<OfferAddon>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rankValue: () => Promise<Int>;
}

export interface OfferAddonSubscription
  extends Promise<AsyncIterator<OfferAddon>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rankValue: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  firstName?: String;
  lastName?: String;
  companyName?: String;
  password: String;
  location: String;
  gender?: Gender;
  permissions: Permission[];
  facebookID?: ID_Output;
  googleID?: ID_Output;
  resetToken?: String;
  resetTokenExpiry?: Float;
  clientType: ClientType;
  language?: ClientLanguage;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  companyName: () => Promise<String>;
  password: () => Promise<String>;
  location: () => Promise<String>;
  birthDate: <T = DatePromise>() => T;
  gender: () => Promise<Gender>;
  permissions: () => Promise<Permission[]>;
  ads: <T = FragmentableArray<Ad>>(
    args?: {
      where?: AdWhereInput;
      orderBy?: AdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cars: <T = FragmentableArray<Car>>(
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  facebookID: () => Promise<ID_Output>;
  googleID: () => Promise<ID_Output>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  conversations: <T = FragmentableArray<Conversation>>(
    args?: {
      where?: ConversationWhereInput;
      orderBy?: ConversationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  clientType: () => Promise<ClientType>;
  language: () => Promise<ClientLanguage>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  birthDate: <T = DateSubscription>() => T;
  gender: () => Promise<AsyncIterator<Gender>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  ads: <T = Promise<AsyncIterator<AdSubscription>>>(
    args?: {
      where?: AdWhereInput;
      orderBy?: AdOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cars: <T = Promise<AsyncIterator<CarSubscription>>>(
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  facebookID: () => Promise<AsyncIterator<ID_Output>>;
  googleID: () => Promise<AsyncIterator<ID_Output>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  conversations: <T = Promise<AsyncIterator<ConversationSubscription>>>(
    args?: {
      where?: ConversationWhereInput;
      orderBy?: ConversationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  clientType: () => Promise<AsyncIterator<ClientType>>;
  language: () => Promise<AsyncIterator<ClientLanguage>>;
}

export interface CarModelSubscriptionPayload {
  mutation: MutationType;
  node: CarModel;
  updatedFields: String[];
  previousValues: CarModelPreviousValues;
}

export interface CarModelSubscriptionPayloadPromise
  extends Promise<CarModelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarModelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarModelPreviousValuesPromise>() => T;
}

export interface CarModelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarModelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarModelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarModelPreviousValuesSubscription>() => T;
}

export interface AggregateOffer {
  count: Int;
}

export interface AggregateOfferPromise
  extends Promise<AggregateOffer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferSubscription
  extends Promise<AsyncIterator<AggregateOffer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarModelPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CarModelPreviousValuesPromise
  extends Promise<CarModelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarModelPreviousValuesSubscription
  extends Promise<AsyncIterator<CarModelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Offer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  price: Float;
  status: OfferStatus;
  finalRank?: Int;
}

export interface OfferPromise extends Promise<Offer>, Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  ad: <T = AdPromise>() => T;
  car: <T = CarPromise>() => T;
  price: () => Promise<Float>;
  status: () => Promise<OfferStatus>;
  finalRank: () => Promise<Int>;
  addons: <T = FragmentableArray<OfferAddon>>(
    args?: {
      where?: OfferAddonWhereInput;
      orderBy?: OfferAddonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  conversation: <T = ConversationPromise>() => T;
}

export interface OfferSubscription
  extends Promise<AsyncIterator<Offer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  creator: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ad: <T = AdSubscription>() => T;
  car: <T = CarSubscription>() => T;
  price: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<OfferStatus>>;
  finalRank: () => Promise<AsyncIterator<Int>>;
  addons: <T = Promise<AsyncIterator<OfferAddonSubscription>>>(
    args?: {
      where?: OfferAddonWhereInput;
      orderBy?: OfferAddonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  conversation: <T = ConversationSubscription>() => T;
}

export interface ManufacturerConnection {
  pageInfo: PageInfo;
  edges: ManufacturerEdge[];
}

export interface ManufacturerConnectionPromise
  extends Promise<ManufacturerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ManufacturerEdge>>() => T;
  aggregate: <T = AggregateManufacturerPromise>() => T;
}

export interface ManufacturerConnectionSubscription
  extends Promise<AsyncIterator<ManufacturerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ManufacturerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateManufacturerSubscription>() => T;
}

export interface ConversationSubscriptionPayload {
  mutation: MutationType;
  node: Conversation;
  updatedFields: String[];
  previousValues: ConversationPreviousValues;
}

export interface ConversationSubscriptionPayloadPromise
  extends Promise<ConversationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConversationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConversationPreviousValuesPromise>() => T;
}

export interface ConversationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConversationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConversationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConversationPreviousValuesSubscription>() => T;
}

export interface DateConnection {
  pageInfo: PageInfo;
  edges: DateEdge[];
}

export interface DateConnectionPromise
  extends Promise<DateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DateEdge>>() => T;
  aggregate: <T = AggregateDatePromise>() => T;
}

export interface DateConnectionSubscription
  extends Promise<AsyncIterator<DateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDateSubscription>() => T;
}

export interface ConversationPreviousValues {
  id: ID_Output;
  status?: ConversationStatus;
}

export interface ConversationPreviousValuesPromise
  extends Promise<ConversationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<ConversationStatus>;
}

export interface ConversationPreviousValuesSubscription
  extends Promise<AsyncIterator<ConversationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<ConversationStatus>>;
}

export interface ConversationConnection {
  pageInfo: PageInfo;
  edges: ConversationEdge[];
}

export interface ConversationConnectionPromise
  extends Promise<ConversationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConversationEdge>>() => T;
  aggregate: <T = AggregateConversationPromise>() => T;
}

export interface ConversationConnectionSubscription
  extends Promise<AsyncIterator<ConversationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConversationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConversationSubscription>() => T;
}

export interface CarFeatureCategory {
  id: ID_Output;
  name: String;
  type: CarFeatureType;
}

export interface CarFeatureCategoryPromise
  extends Promise<CarFeatureCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<CarFeatureType>;
  features: <T = FragmentableArray<CarFeature>>(
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarFeatureCategorySubscription
  extends Promise<AsyncIterator<CarFeatureCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<CarFeatureType>>;
  features: <T = Promise<AsyncIterator<CarFeatureSubscription>>>(
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCarFeatureCategory {
  count: Int;
}

export interface AggregateCarFeatureCategoryPromise
  extends Promise<AggregateCarFeatureCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarFeatureCategorySubscription
  extends Promise<AsyncIterator<AggregateCarFeatureCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DateSubscriptionPayload {
  mutation: MutationType;
  node: Date;
  updatedFields: String[];
  previousValues: DatePreviousValues;
}

export interface DateSubscriptionPayloadPromise
  extends Promise<DateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DatePreviousValuesPromise>() => T;
}

export interface DateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DatePreviousValuesSubscription>() => T;
}

export interface AggregateCarFeature {
  count: Int;
}

export interface AggregateCarFeaturePromise
  extends Promise<AggregateCarFeature>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarFeatureSubscription
  extends Promise<AsyncIterator<AggregateCarFeature>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DatePreviousValues {
  day: Int;
  month: Int;
  year: Int;
}

export interface DatePreviousValuesPromise
  extends Promise<DatePreviousValues>,
    Fragmentable {
  day: () => Promise<Int>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface DatePreviousValuesSubscription
  extends Promise<AsyncIterator<DatePreviousValues>>,
    Fragmentable {
  day: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CarFeature {
  id: ID_Output;
  name: String;
}

export interface CarFeaturePromise extends Promise<CarFeature>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: <T = CarFeatureCategoryPromise>() => T;
}

export interface CarFeatureSubscription
  extends Promise<AsyncIterator<CarFeature>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: <T = CarFeatureCategorySubscription>() => T;
}

export interface OfferAddonEdge {
  node: OfferAddon;
  cursor: String;
}

export interface OfferAddonEdgePromise
  extends Promise<OfferAddonEdge>,
    Fragmentable {
  node: <T = OfferAddonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferAddonEdgeSubscription
  extends Promise<AsyncIterator<OfferAddonEdge>>,
    Fragmentable {
  node: <T = OfferAddonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ManufacturerSubscriptionPayload {
  mutation: MutationType;
  node: Manufacturer;
  updatedFields: String[];
  previousValues: ManufacturerPreviousValues;
}

export interface ManufacturerSubscriptionPayloadPromise
  extends Promise<ManufacturerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ManufacturerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ManufacturerPreviousValuesPromise>() => T;
}

export interface ManufacturerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ManufacturerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ManufacturerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ManufacturerPreviousValuesSubscription>() => T;
}

export interface AggregateManufacturer {
  count: Int;
}

export interface AggregateManufacturerPromise
  extends Promise<AggregateManufacturer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateManufacturerSubscription
  extends Promise<AsyncIterator<AggregateManufacturer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ManufacturerPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ManufacturerPreviousValuesPromise
  extends Promise<ManufacturerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ManufacturerPreviousValuesSubscription
  extends Promise<AsyncIterator<ManufacturerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConversation {
  count: Int;
}

export interface AggregateConversationPromise
  extends Promise<AggregateConversation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConversationSubscription
  extends Promise<AsyncIterator<AggregateConversation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarCategory {
  id: ID_Output;
  name: String;
}

export interface CarCategoryPromise extends Promise<CarCategory>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarCategorySubscription
  extends Promise<AsyncIterator<CarCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarFeatureCategoryConnection {
  pageInfo: PageInfo;
  edges: CarFeatureCategoryEdge[];
}

export interface CarFeatureCategoryConnectionPromise
  extends Promise<CarFeatureCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarFeatureCategoryEdge>>() => T;
  aggregate: <T = AggregateCarFeatureCategoryPromise>() => T;
}

export interface CarFeatureCategoryConnectionSubscription
  extends Promise<AsyncIterator<CarFeatureCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CarFeatureCategoryEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCarFeatureCategorySubscription>() => T;
}

export interface Car {
  id: ID_Output;
  description?: String;
  year: Int;
  mileage: Int;
  photos: String[];
  status: CarStatus;
}

export interface CarPromise extends Promise<Car>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  manufacturer: <T = ManufacturerPromise>() => T;
  model: <T = CarModelPromise>() => T;
  category: <T = CarCategoryPromise>() => T;
  description: () => Promise<String>;
  year: () => Promise<Int>;
  mileage: () => Promise<Int>;
  photos: () => Promise<String[]>;
  features: <T = FragmentableArray<CarFeature>>(
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<CarStatus>;
  offers: <T = FragmentableArray<Offer>>(
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarSubscription
  extends Promise<AsyncIterator<Car>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  manufacturer: <T = ManufacturerSubscription>() => T;
  model: <T = CarModelSubscription>() => T;
  category: <T = CarCategorySubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<Int>>;
  mileage: () => Promise<AsyncIterator<Int>>;
  photos: () => Promise<AsyncIterator<String[]>>;
  features: <T = Promise<AsyncIterator<CarFeatureSubscription>>>(
    args?: {
      where?: CarFeatureWhereInput;
      orderBy?: CarFeatureOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<CarStatus>>;
  offers: <T = Promise<AsyncIterator<OfferSubscription>>>(
    args?: {
      where?: OfferWhereInput;
      orderBy?: OfferOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface OfferSubscriptionPayload {
  mutation: MutationType;
  node: Offer;
  updatedFields: String[];
  previousValues: OfferPreviousValues;
}

export interface OfferSubscriptionPayloadPromise
  extends Promise<OfferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferPreviousValuesPromise>() => T;
}

export interface OfferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferPreviousValuesSubscription>() => T;
}

export interface CarModel {
  id: ID_Output;
  name: String;
}

export interface CarModelPromise extends Promise<CarModel>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarModelSubscription
  extends Promise<AsyncIterator<CarModel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MessagePreviousValues {
  id: ID_Output;
  text: String;
  image?: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  image: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface OfferConnection {
  pageInfo: PageInfo;
  edges: OfferEdge[];
}

export interface OfferConnectionPromise
  extends Promise<OfferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferEdge>>() => T;
  aggregate: <T = AggregateOfferPromise>() => T;
}

export interface OfferConnectionSubscription
  extends Promise<AsyncIterator<OfferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferSubscription>() => T;
}

export interface CarFeatureConnection {
  pageInfo: PageInfo;
  edges: CarFeatureEdge[];
}

export interface CarFeatureConnectionPromise
  extends Promise<CarFeatureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarFeatureEdge>>() => T;
  aggregate: <T = AggregateCarFeaturePromise>() => T;
}

export interface CarFeatureConnectionSubscription
  extends Promise<AsyncIterator<CarFeatureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarFeatureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarFeatureSubscription>() => T;
}

export interface CarModelEdge {
  node: CarModel;
  cursor: String;
}

export interface CarModelEdgePromise
  extends Promise<CarModelEdge>,
    Fragmentable {
  node: <T = CarModelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarModelEdgeSubscription
  extends Promise<AsyncIterator<CarModelEdge>>,
    Fragmentable {
  node: <T = CarModelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDate {
  count: Int;
}

export interface AggregateDatePromise
  extends Promise<AggregateDate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDateSubscription
  extends Promise<AsyncIterator<AggregateDate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Ad",
    embedded: false
  },
  {
    name: "Date",
    embedded: false
  },
  {
    name: "Offer",
    embedded: false
  },
  {
    name: "OfferAddon",
    embedded: false
  },
  {
    name: "Car",
    embedded: false
  },
  {
    name: "CarCategory",
    embedded: false
  },
  {
    name: "CarFeatureCategory",
    embedded: false
  },
  {
    name: "CarFeature",
    embedded: false
  },
  {
    name: "Manufacturer",
    embedded: false
  },
  {
    name: "CarModel",
    embedded: false
  },
  {
    name: "Conversation",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "ClientType",
    embedded: false
  },
  {
    name: "ClientLanguage",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "AdStatus",
    embedded: false
  },
  {
    name: "OfferStatus",
    embedded: false
  },
  {
    name: "ConversationStatus",
    embedded: false
  },
  {
    name: "CarStatus",
    embedded: false
  },
  {
    name: "CarFeatureType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
