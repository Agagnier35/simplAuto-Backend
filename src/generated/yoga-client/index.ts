// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Post,
  User,
  Date,
  Offer,
  Ad,
  PriceBoundFeature,
  ManufacturerFeature,
  Manufacturer,
  CarModel,
  ModelFeature,
  CategoryFeature,
  CarCategory,
  MileageBoundFeature,
  YearBoundFeature,
  AdCarFeature,
  CarFeature,
  CarFeatureCategory,
  Car
} from "../prisma-client/index";
type Context = any;

export type Gender = "MALE" | "FEMALE" | "OTHER";
export type Permission = "USER" | "PREMIUM" | "ADMIN";
export type AdFeatureImportance = "LOW" | "MEDIUM" | "HIGH";
export type CarFeatureType = "TRUE_FALSE" | "MULTIPLE_CHOICE";
export type AdStatus = "PUBLISHED" | "ACCEPTED" | "DELETED";
export type OfferStatus = "PUBLISHED" | "ACCEPTED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsPost {
    id: string;
  }

  export interface ArgsAds {
    adFeaturesIDs?: Array<string | null> | null;
  }

  export interface ArgsAd {
    id: string;
  }

  export interface ArgsCar {
    id: string;
  }

  export interface ArgsCarFeatureCategory {
    name: string;
  }

  export type FeedResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type DraftsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type PostResolver = (
    parent: undefined,
    args: ArgsPost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type AdsResolver = (
    parent: undefined,
    args: ArgsAds,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Ad[] | null | Promise<Ad[] | null>;

  export type AdResolver = (
    parent: undefined,
    args: ArgsAd,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Ad | null | Promise<Ad | null>;

  export type CarResolver = (
    parent: undefined,
    args: ArgsCar,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Car | null | Promise<Car | null>;

  export type CarCategoriesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<CarCategory | null>
    | null
    | Promise<Array<CarCategory | null> | null>;

  export type CarFeatureCategoryResolver = (
    parent: undefined,
    args: ArgsCarFeatureCategory,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarFeatureCategory | null | Promise<CarFeatureCategory | null>;

  export type CarFeatureCategoriesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<CarFeatureCategory | null>
    | null
    | Promise<Array<CarFeatureCategory | null> | null>;

  export type ManufacturersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<Manufacturer | null>
    | null
    | Promise<Array<Manufacturer | null> | null>;

  export interface Type {
    feed: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    drafts: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    post: (
      parent: undefined,
      args: ArgsPost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    ads: (
      parent: undefined,
      args: ArgsAds,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Ad[] | null | Promise<Ad[] | null>;

    ad: (
      parent: undefined,
      args: ArgsAd,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Ad | null | Promise<Ad | null>;

    car: (
      parent: undefined,
      args: ArgsCar,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Car | null | Promise<Car | null>;

    carCategories: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<CarCategory | null>
      | null
      | Promise<Array<CarCategory | null> | null>;

    carFeatureCategory: (
      parent: undefined,
      args: ArgsCarFeatureCategory,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarFeatureCategory | null | Promise<CarFeatureCategory | null>;

    carFeatureCategories: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<CarFeatureCategory | null>
      | null
      | Promise<Array<CarFeatureCategory | null> | null>;

    manufacturers: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<Manufacturer | null>
      | null
      | Promise<Array<Manufacturer | null> | null>;
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    published: (parent: Post) => parent.published,
    title: (parent: Post) => parent.title,
    content: (parent: Post) => parent.content
  };

  export type IdResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PublishedResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type TitleResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContentResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AuthorResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    id: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    published: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    title: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    content: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    author: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    firstName: (parent: User) => parent.firstName,
    lastName: (parent: User) => parent.lastName,
    password: (parent: User) => parent.password,
    location: (parent: User) => parent.location,
    gender: (parent: User) => parent.gender,
    permissions: (parent: User) => parent.permissions
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FirstNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PasswordResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LocationResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type BirthDateResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Date | Promise<Date>;

  export type GenderResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Gender | Promise<Gender>;

  export type PermissionsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Permission[] | Promise<Permission[]>;

  export type OffersResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Offer[] | Promise<Offer[]>;

  export type AdsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Ad[] | Promise<Ad[]>;

  export type CarsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Car[] | Promise<Car[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    firstName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lastName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    password: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    location: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    birthDate: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Date | Promise<Date>;

    gender: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Gender | Promise<Gender>;

    permissions: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Permission[] | Promise<Permission[]>;

    offers: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Offer[] | Promise<Offer[]>;

    ads: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Ad[] | Promise<Ad[]>;

    cars: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Car[] | Promise<Car[]>;
  }
}

export namespace DateResolvers {
  export const defaultResolvers = {
    day: (parent: Date) => parent.day,
    month: (parent: Date) => parent.month,
    year: (parent: Date) => parent.year
  };

  export type DayResolver = (
    parent: Date,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MonthResolver = (
    parent: Date,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type YearResolver = (
    parent: Date,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    day: (
      parent: Date,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    month: (
      parent: Date,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    year: (
      parent: Date,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace OfferResolvers {
  export const defaultResolvers = {
    id: (parent: Offer) => parent.id,
    price: (parent: Offer) => parent.price,
    status: (parent: Offer) => parent.status,
    finalRank: (parent: Offer) =>
      parent.finalRank === undefined ? null : parent.finalRank
  };

  export type IdResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatorResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type AdResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Ad | Promise<Ad>;

  export type CarResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Car | Promise<Car>;

  export type PriceResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type StatusResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => OfferStatus | Promise<OfferStatus>;

  export type FinalRankResolver = (
    parent: Offer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export interface Type {
    id: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    creator: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    ad: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Ad | Promise<Ad>;

    car: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Car | Promise<Car>;

    price: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    status: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => OfferStatus | Promise<OfferStatus>;

    finalRank: (
      parent: Offer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;
  }
}

export namespace AdResolvers {
  export const defaultResolvers = {
    id: (parent: Ad) => parent.id,
    isUrgent: (parent: Ad) => parent.isUrgent,
    isFirst: (parent: Ad) => parent.isFirst,
    status: (parent: Ad) => parent.status
  };

  export type IdResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CreatorResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type OffersResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Offer[] | null | Promise<Offer[] | null>;

  export type PriceLowerBoundFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PriceBoundFeature | null | Promise<PriceBoundFeature | null>;

  export type PriceHigherBoundFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PriceBoundFeature | null | Promise<PriceBoundFeature | null>;

  export type ManufacturerFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ManufacturerFeature | null | Promise<ManufacturerFeature | null>;

  export type ModelFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => ModelFeature | null | Promise<ModelFeature | null>;

  export type CategoryFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CategoryFeature | null | Promise<CategoryFeature | null>;

  export type MileageLowerBoundFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MileageBoundFeature | null | Promise<MileageBoundFeature | null>;

  export type MileageHigherBoundFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MileageBoundFeature | null | Promise<MileageBoundFeature | null>;

  export type YearLowerBoundFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => YearBoundFeature | null | Promise<YearBoundFeature | null>;

  export type YearHigherBoundFeatureResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => YearBoundFeature | null | Promise<YearBoundFeature | null>;

  export type FeaturesResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdCarFeature[] | null | Promise<AdCarFeature[] | null>;

  export type IsUrgentResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type IsFirstResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type StatusResolver = (
    parent: Ad,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdStatus | Promise<AdStatus>;

  export interface Type {
    id: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    creator: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    offers: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Offer[] | null | Promise<Offer[] | null>;

    priceLowerBoundFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PriceBoundFeature | null | Promise<PriceBoundFeature | null>;

    priceHigherBoundFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PriceBoundFeature | null | Promise<PriceBoundFeature | null>;

    manufacturerFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ManufacturerFeature | null | Promise<ManufacturerFeature | null>;

    modelFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => ModelFeature | null | Promise<ModelFeature | null>;

    categoryFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CategoryFeature | null | Promise<CategoryFeature | null>;

    mileageLowerBoundFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MileageBoundFeature | null | Promise<MileageBoundFeature | null>;

    mileageHigherBoundFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MileageBoundFeature | null | Promise<MileageBoundFeature | null>;

    yearLowerBoundFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => YearBoundFeature | null | Promise<YearBoundFeature | null>;

    yearHigherBoundFeature: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => YearBoundFeature | null | Promise<YearBoundFeature | null>;

    features: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdCarFeature[] | null | Promise<AdCarFeature[] | null>;

    isUrgent: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    isFirst: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    status: (
      parent: Ad,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdStatus | Promise<AdStatus>;
  }
}

export namespace PriceBoundFeatureResolvers {
  export const defaultResolvers = {
    price: (parent: PriceBoundFeature) => parent.price,
    importance: (parent: PriceBoundFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type PriceResolver = (
    parent: PriceBoundFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ImportanceResolver = (
    parent: PriceBoundFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    price: (
      parent: PriceBoundFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    importance: (
      parent: PriceBoundFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace ManufacturerFeatureResolvers {
  export const defaultResolvers = {
    importance: (parent: ManufacturerFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type ManufacturerResolver = (
    parent: ManufacturerFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Manufacturer | Promise<Manufacturer>;

  export type ImportanceResolver = (
    parent: ManufacturerFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    manufacturer: (
      parent: ManufacturerFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Manufacturer | Promise<Manufacturer>;

    importance: (
      parent: ManufacturerFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace ManufacturerResolvers {
  export const defaultResolvers = {
    id: (parent: Manufacturer) => parent.id,
    name: (parent: Manufacturer) => parent.name
  };

  export type IdResolver = (
    parent: Manufacturer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Manufacturer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ModelsResolver = (
    parent: Manufacturer,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarModel[] | Promise<CarModel[]>;

  export interface Type {
    id: (
      parent: Manufacturer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Manufacturer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    models: (
      parent: Manufacturer,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarModel[] | Promise<CarModel[]>;
  }
}

export namespace CarModelResolvers {
  export const defaultResolvers = {
    id: (parent: CarModel) => parent.id,
    name: (parent: CarModel) => parent.name
  };

  export type IdResolver = (
    parent: CarModel,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: CarModel,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: CarModel,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: CarModel,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace ModelFeatureResolvers {
  export const defaultResolvers = {
    importance: (parent: ModelFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type ModelResolver = (
    parent: ModelFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarModel | Promise<CarModel>;

  export type ImportanceResolver = (
    parent: ModelFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    model: (
      parent: ModelFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarModel | Promise<CarModel>;

    importance: (
      parent: ModelFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace CategoryFeatureResolvers {
  export const defaultResolvers = {
    importance: (parent: CategoryFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type CategoryResolver = (
    parent: CategoryFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarCategory | Promise<CarCategory>;

  export type ImportanceResolver = (
    parent: CategoryFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    category: (
      parent: CategoryFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarCategory | Promise<CarCategory>;

    importance: (
      parent: CategoryFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace CarCategoryResolvers {
  export const defaultResolvers = {
    id: (parent: CarCategory) => parent.id,
    name: (parent: CarCategory) => parent.name
  };

  export type IdResolver = (
    parent: CarCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: CarCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: CarCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: CarCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MileageBoundFeatureResolvers {
  export const defaultResolvers = {
    mileage: (parent: MileageBoundFeature) => parent.mileage,
    importance: (parent: MileageBoundFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type MileageResolver = (
    parent: MileageBoundFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ImportanceResolver = (
    parent: MileageBoundFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    mileage: (
      parent: MileageBoundFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    importance: (
      parent: MileageBoundFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace YearBoundFeatureResolvers {
  export const defaultResolvers = {
    year: (parent: YearBoundFeature) => parent.year,
    importance: (parent: YearBoundFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type YearResolver = (
    parent: YearBoundFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ImportanceResolver = (
    parent: YearBoundFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    year: (
      parent: YearBoundFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    importance: (
      parent: YearBoundFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace AdCarFeatureResolvers {
  export const defaultResolvers = {
    id: (parent: AdCarFeature) => parent.id,
    importance: (parent: AdCarFeature) =>
      parent.importance === undefined ? null : parent.importance
  };

  export type IdResolver = (
    parent: AdCarFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FeatureResolver = (
    parent: AdCarFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarFeature | Promise<CarFeature>;

  export type ImportanceResolver = (
    parent: AdCarFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;

  export interface Type {
    id: (
      parent: AdCarFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    feature: (
      parent: AdCarFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarFeature | Promise<CarFeature>;

    importance: (
      parent: AdCarFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AdFeatureImportance | null | Promise<AdFeatureImportance | null>;
  }
}

export namespace CarFeatureResolvers {
  export const defaultResolvers = {
    id: (parent: CarFeature) => parent.id,
    name: (parent: CarFeature) => parent.name
  };

  export type IdResolver = (
    parent: CarFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: CarFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CategoryResolver = (
    parent: CarFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarFeatureCategory | Promise<CarFeatureCategory>;

  export interface Type {
    id: (
      parent: CarFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: CarFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    category: (
      parent: CarFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarFeatureCategory | Promise<CarFeatureCategory>;
  }
}

export namespace CarFeatureCategoryResolvers {
  export const defaultResolvers = {
    id: (parent: CarFeatureCategory) => parent.id,
    name: (parent: CarFeatureCategory) => parent.name,
    type: (parent: CarFeatureCategory) => parent.type
  };

  export type IdResolver = (
    parent: CarFeatureCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: CarFeatureCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypeResolver = (
    parent: CarFeatureCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarFeatureType | Promise<CarFeatureType>;

  export type FeaturesResolver = (
    parent: CarFeatureCategory,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarFeature[] | Promise<CarFeature[]>;

  export interface Type {
    id: (
      parent: CarFeatureCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: CarFeatureCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    type: (
      parent: CarFeatureCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarFeatureType | Promise<CarFeatureType>;

    features: (
      parent: CarFeatureCategory,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarFeature[] | Promise<CarFeature[]>;
  }
}

export namespace CarResolvers {
  export const defaultResolvers = {
    id: (parent: Car) => parent.id,
    year: (parent: Car) => parent.year,
    mileage: (parent: Car) => parent.mileage,
    photos: (parent: Car) => parent.photos
  };

  export type IdResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OwnerResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type ManufacturerResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Manufacturer | Promise<Manufacturer>;

  export type ModelResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarModel | Promise<CarModel>;

  export type CategoryResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarCategory | Promise<CarCategory>;

  export type YearResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MileageResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type PhotosResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type FeaturesResolver = (
    parent: Car,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => CarFeature[] | Promise<CarFeature[]>;

  export interface Type {
    id: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    owner: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    manufacturer: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Manufacturer | Promise<Manufacturer>;

    model: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarModel | Promise<CarModel>;

    category: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarCategory | Promise<CarCategory>;

    year: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    mileage: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    photos: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    features: (
      parent: Car,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => CarFeature[] | Promise<CarFeature[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface UserSignupInput {
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    location: string;
    birthDate: DateInput;
    gender: Gender;
    permissions?: Permission[] | null;
  }
  export interface UserUpdateInput {
    id: string;
    email?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    password?: string | null;
    location?: string | null;
    birthDate?: DateInput | null;
    gender?: Gender | null;
    permissions?: Permission[] | null;
  }
  export interface CarCreateInput {
    manufacturerID: string;
    modelID: string;
    categoryID: string;
    year: number;
    mileage: number;
    photos: string[];
    featuresIDs?: string[] | null;
  }
  export interface AdCreateInput {
    priceLowerBoundFeature?: PriceBoundFeatureInput | null;
    priceHigherBoundFeature?: PriceBoundFeatureInput | null;
    manufacturerFeature?: ManufacturerFeatureInput | null;
    modelFeature?: ModelFeatureInput | null;
    categoryFeature?: CategoryFeatureInput | null;
    mileageLowerBoundFeature?: MileageBoundFeatureInput | null;
    mileageHigherBoundFeature?: MileageBoundFeatureInput | null;
    yearLowerBoundFeature?: YearBoundFeatureInput | null;
    yearHigherBoundFeature?: YearBoundFeatureInput | null;
    features?: AdCarFeatureInput[] | null;
  }
  export interface DateInput {
    day: number;
    month: number;
    year: number;
  }
  export interface PriceBoundFeatureInput {
    price: number;
    importance?: AdFeatureImportance | null;
  }
  export interface ManufacturerFeatureInput {
    manufacturerID: string;
    importance?: AdFeatureImportance | null;
  }
  export interface ModelFeatureInput {
    modelID: string;
    importance?: AdFeatureImportance | null;
  }
  export interface CategoryFeatureInput {
    categoryID: string;
    importance?: AdFeatureImportance | null;
  }
  export interface MileageBoundFeatureInput {
    mileage: number;
    importance?: AdFeatureImportance | null;
  }
  export interface YearBoundFeatureInput {
    year: number;
    importance?: AdFeatureImportance | null;
  }
  export interface AdCarFeatureInput {
    featureID: string;
    importance?: AdFeatureImportance | null;
  }

  export interface ArgsSignup {
    data: UserSignupInput;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsUpdateUser {
    data: UserUpdateInput;
  }

  export interface ArgsCreateDraft {
    title: string;
    content: string;
  }

  export interface ArgsCreateCar {
    data: CarCreateInput;
  }

  export interface ArgsCreateAd {
    data: AdCreateInput;
  }

  export interface ArgsPublish {
    id: string;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsResetPasswordRequest {
    email: string;
  }

  export interface ArgsResetPassword {
    resetToken: string;
    password: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type LogoutResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UpdateUserResolver = (
    parent: undefined,
    args: ArgsUpdateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type CreateDraftResolver = (
    parent: undefined,
    args: ArgsCreateDraft,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type CreateCarResolver = (
    parent: undefined,
    args: ArgsCreateCar,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Car | null | Promise<Car | null>;

  export type CreateAdResolver = (
    parent: undefined,
    args: ArgsCreateAd,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Ad | null | Promise<Ad | null>;

  export type PublishResolver = (
    parent: undefined,
    args: ArgsPublish,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type DeletePostResolver = (
    parent: undefined,
    args: ArgsDeletePost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type ResetPasswordRequestResolver = (
    parent: undefined,
    args: ArgsResetPasswordRequest,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ResetPasswordResolver = (
    parent: undefined,
    args: ArgsResetPassword,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    logout: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    updateUser: (
      parent: undefined,
      args: ArgsUpdateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    createDraft: (
      parent: undefined,
      args: ArgsCreateDraft,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    createCar: (
      parent: undefined,
      args: ArgsCreateCar,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Car | null | Promise<Car | null>;

    createAd: (
      parent: undefined,
      args: ArgsCreateAd,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Ad | null | Promise<Ad | null>;

    publish: (
      parent: undefined,
      args: ArgsPublish,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    deletePost: (
      parent: undefined,
      args: ArgsDeletePost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    resetPasswordRequest: (
      parent: undefined,
      args: ArgsResetPasswordRequest,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    resetPassword: (
      parent: undefined,
      args: ArgsResetPassword,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export type FeedSubscriptionResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AsyncIterator<Post | null> | Promise<AsyncIterator<Post | null>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;
  };

  export interface Type {
    feedSubscription: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AsyncIterator<Post | null> | Promise<AsyncIterator<Post | null>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | null | Promise<Post | null>;
    };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  User: UserResolvers.Type;
  Date: DateResolvers.Type;
  Offer: OfferResolvers.Type;
  Ad: AdResolvers.Type;
  PriceBoundFeature: PriceBoundFeatureResolvers.Type;
  ManufacturerFeature: ManufacturerFeatureResolvers.Type;
  Manufacturer: ManufacturerResolvers.Type;
  CarModel: CarModelResolvers.Type;
  ModelFeature: ModelFeatureResolvers.Type;
  CategoryFeature: CategoryFeatureResolvers.Type;
  CarCategory: CarCategoryResolvers.Type;
  MileageBoundFeature: MileageBoundFeatureResolvers.Type;
  YearBoundFeature: YearBoundFeatureResolvers.Type;
  AdCarFeature: AdCarFeatureResolvers.Type;
  CarFeature: CarFeatureResolvers.Type;
  CarFeatureCategory: CarFeatureCategoryResolvers.Type;
  Car: CarResolvers.Type;
  Mutation: MutationResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
}
