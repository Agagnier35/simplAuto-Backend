directive @private(requires: Permission = ADMIN) on FIELD_DEFINITION
directive @notBanned(requires: String) on FIELD_DEFINITION

type Query {
  me: User @notBanned
  ads(pageNumber: Int, pageSize: Int): [Ad!]
  ad(id: ID!): Ad
  suggestions(id: ID!, pageNumber: Int, pageSize: Int): [OfferPosition]
  adSuggestion(id: ID!, pageNumber: Int, pageSize: Int): [AdPosition]
  car(id: ID!): Car
  carCategories: [CarCategory]
  carFeatureCategory(name: String!): CarFeatureCategory
  carFeatureCategories: [CarFeatureCategory]
  manufacturers: [Manufacturer]
  offer(id: ID!): Offer
  offerAddons: [OfferAddon!]
  allAdsCount: Int!
  statsForAds(id: ID!): Statistics
  statsForOffer(id: ID!): Statistics
  adminStats: AdminStatistics
  adminStatisticsCar(data: AdminCarResarchInput): AdminCarResearchStatistics
  getPrices: Prices!
  users(where: UserWhereInput!, pageNumber: Int, pageSize: Int): UsersPayload
  homePageAds: [Ad]
  user(
    id: ID!
    offerPageNumber: Int
    offerPageSize: Int
    adPageNumber: Int
    adPageSize: Int
    carPageNumber: Int
    carPageSize: Int
  ): User
}

type Mutation {
  signup(data: UserSignupInput!): User!
  login(email: String!, password: String!): User!
  facebookLogin(data: UserSignupInput!): User!
  googleLogin(data: UserSignupInput!): User!
  logout: String!
  updateUser(data: UserUpdateInput!): User!
  createCar(data: CarCreateInput!): Car
  deleteCar(id: ID!): Car
  createAd(data: AdCreateInput!): Ad
  updateAd(data: AdUpdateInput!): Ad
  deleteAd(id: ID!): Ad
  resetPasswordRequest(email: String!): String!
  resetPassword(resetToken: String!, password: String!): User!
  createOffer(data: OfferCreateInput!): Offer
  updateOffer(data: OfferUpdateInput!): Offer
  deleteOffer(id: ID!): Offer
  createConversation(offerID: ID!): Conversation!
  sendMessage(data: SendMessageInput): Message!
  deleteNotification(id: ID!): Notification
  goPremium(stripeToken: String!): User!
  acceptOffer(id: ID!): Offer
  refuseOffer(id: ID!): Offer
  sendNotificationEmail(id: ID!): String
  buyCarSpot(stripeToken: String!, amount: Int!): User!
  buyUrgentAd(stripeToken: String!, id: ID!): Ad!
  buyTopAd(stripeToken: String!, id: ID!): Ad!
  banUser(id: ID!): User
  updateConversation(data: ConversationUpdateInput!): Conversation!
}

# USER
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  companyName: String
  password: String!
  location: Location!
  radius: Int!
  birthDate: Date
  gender: Gender
  permissions: [Permission!]!
  facebookID: String
  googleID: String
  ads(pageNumber: Int, pageSize: Int): [Ad!]!
  cars(pageNumber: Int, pageSize: Int): [Car!]!
  conversations: [Conversation!]
  conversationCount: Int!
  adCount: Int!
  carCount: Int!
  clientType: ClientType!
  language: UserLanguage
  offers(pageNumber: Int, pageSize: Int): [Offer!]!
  offerCount: Int!
  notifications: [Notification!]!
  notificationCount: Int!
  notificationEmailOffer: Boolean!
  notificationEmailMessage: Boolean!
  notificationInAppOffer: Boolean!
  notificationInAppMessage: Boolean!
  carLimit: Int!
  createdAt: String!
  status: UserStatus!
}

enum UserStatus {
  NORMAL
  BANNED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ClientType {
  COMPANY
  INDIVIDUAL
}

enum Permission {
  USER
  PREMIUM
  ADMIN
}

type Location{
  id: ID!
  name: String!
  longitude: Float!
  latitude: Float!
}

input LocationInput{
  name: String!
  longitude: Float!
  latitude: Float!
}

input UserSignupInput {
  email: String!
  firstName: String
  lastName: String
  companyName: String
  password: String!
  location: LocationInput!
  radius: Int!
  birthDate: DateInput
  gender: Gender
  permissions: [Permission!]
  facebookID: String
  googleID: String
  clientType: ClientType!
  language: UserLanguage
}

input UserUpdateInput {
  id: ID!
  email: String
  firstName: String
  lastName: String
  companyName: String
  password: String
  location: LocationInput
  radius: Int
  birthDate: DateInput
  gender: Gender
  permissions: [Permission!]
  clientType: ClientType
  language: UserLanguage
  notificationEmailOffer: Boolean
  notificationEmailMessage: Boolean
  notificationInAppOffer: Boolean
  notificationInAppMessage: Boolean
  status: UserStatus
}

# Cars
# ------------------------------------------------------

type Car {
  id: ID!
  owner: User @private
  manufacturer: Manufacturer!
  model: CarModel!
  category: CarCategory!
  description: String
  year: Int!
  mileage: Int!
  photos: [String!]!
  photoCount: Int!
  features: [CarFeature!]!
  status: CarStatus!
  offers(pageNumber: Int, pageSize: Int): [Offer!]
  offerCount: Int!
}

enum CarStatus {
  PUBLISHED
  SOLD
  DELETED
}

type CarCategory {
  id: ID!
  name: String!
}

type CarFeatureCategory {
  id: ID!
  name: String!
  type: CarFeatureType!
  features: [CarFeature!]!
}

type CarFeature {
  id: ID!
  name: String!
  category: CarFeatureCategory!
}

enum CarFeatureType {
  TRUE_FALSE
  MULTIPLE_CHOICE
}

type Manufacturer {
  id: ID!
  name: String!
  models: [CarModel!]!
}

type CarModel {
  id: ID!
  name: String!
}

input CarCreateInput {
  manufacturerID: String!
  modelID: String!
  categoryID: String!
  description: String
  year: Int!
  mileage: Int!
  photos: [String!]!
  featuresIDs: [String!]
}

# Ad
# ------------------------------------------------------

type Ad {
  id: ID!
  creator: User
  offers(pageNumber: Int, pageSize: Int): [Offer!]!
  offerCount: Int!
  priceLowerBound: Float
  priceHigherBound: Float
  manufacturer: Manufacturer
  model: CarModel
  category: CarCategory
  mileageLowerBound: Int
  mileageHigherBound: Int
  yearLowerBound: Int
  yearHigherBound: Int
  features: [CarFeature!]
  urgentExpiry: String
  topExpiry: String
  status: AdStatus!
}

input AdCreateInput {
  priceLowerBound: Float
  priceHigherBound: Float
  manufacturerID: ID
  modelID: ID
  categoryID: ID
  mileageLowerBound: Int
  mileageHigherBound: Int
  yearLowerBound: Int
  yearHigherBound: Int
  features: [ID!]
}

input AdUpdateInput {
  id: ID!
  priceLowerBound: Float
  priceHigherBound: Float
  manufacturerID: ID
  modelID: ID
  categoryID: ID
  mileageLowerBound: Int
  mileageHigherBound: Int
  yearLowerBound: Int
  yearHigherBound: Int
  features: [ID!]
}

enum AdStatus {
  PUBLISHED
  ACCEPTED
  DELETED
}

enum AdFeatureImportance {
  LOW
  MEDIUM
  HIGH
}

type AdPosition {
  ad: Ad
  position: Int
  score: Int
  totalLength: Int
}

type Statistics {
  averagePriceAPI: Float!
  averageTimeOnMarketAPI: Float!
  averagePriceApp: Float!
  averageTimeOnMarketApp: Float!
}

type AdminStatistics {
  top10MostSoldMakeModel: [Top10Car]!
  top10FastestSold: [Top10Car]!

  bestSeller: User!
  bestSellerTop10Cars: [Top10Car]!

  allVehiculesCount: Int!
  allAdsCount: Int!
  activeUsersCount: Int!
  inactiveUsersCount: Int!
}

type Top10Car {
  model: CarModel!
  make: Manufacturer!
  count: Int!
  averageTime: Float!
  averagePrice: Float!
}

type AdminCarResearchStatistics {
  averagePriceAPI: Float!
  averageTimeOnMarketAPI: Float!
  lowestPriceSoldAPI: Float!
  highestPriceSoldAPI: Float!
  lowestTimeOnMarketAPI: Float!
  highestTimeOnMarketAPI: Float!

  soldOnApp: Float!
  averagePriceApp: Float!
  averageTimeOnMarketApp: Float!
  lowestPriceSoldApp: Float!
  highestPriceSoldApp: Float!
  lowestTimeOnMarketApp: Float!
  highestTimeOnMarketApp: Float!
}

input AdminCarResarchInput {
  manufacturerID: String
  modelID: String
  year: Int
  location: LocationInput
  radius: Int
}

# Offer
# ------------------------------------------------------

type Offer {
  id: ID!
  creator: User
  ad: Ad!
  car: Car!
  price: Float!
  status: OfferStatus!
  finalRank: Int
  addons: [OfferAddon!]
  conversation: Conversation
  createdAt: String!
}

enum OfferStatus {
  PUBLISHED
  REFUSED
  ACCEPTED
  DELETED
}

enum UserLanguage {
  FRENCH
  ENGLISH
}

enum ConversationStatus {
  OPENED
  DELETED
}

input OfferCreateInput {
  adID: String!
  carID: String!
  price: Float!
  addons: [OfferAddonInput!]
}

input OfferUpdateInput {
  id: ID!
  price: Float
  addons: [OfferAddonInput!]
}

type OfferAddon {
  id: ID!
  name: String!
  rankValue: Int!
}

input OfferAddonInput {
  id: ID
  name: String
  rankValue: Int
}

type OfferPosition {
  offer: Offer
  position: Int
  score: Int
  totalLength: Int
}

# Conversation
# ------------------------------------------------------

type Conversation {
  id: ID!
  buyer: User!
  seller: User!
  offer: Offer!
  messages: [Message!]!
  messageCount: Int!
  status: ConversationStatus
}

input ConversationUpdateInput {
  id: ID!
  status: ConversationStatus
}

# Message
# ------------------------------------------------------

type Message {
  id: ID!
  sender: User!
  text: String!
  image: String
  updatedAt: String!
  conversation: Conversation!
}

input SendMessageInput {
  conversationID: ID!
  text: String!
  image: String
}

# Notifications
# ------------------------------------------------------

type Notification {
  id: ID!
  owner: User!
  type: NotificationType!
  objectID: ID
  count: Int!
  updatedAt: String!
}

enum NotificationType {
  GENERAL
  OFFER_MESSAGE
  NEW_OFFER
}

# Prices
# ------------------------------------------------------

type Prices {
  premiumAccount: Int!
  carSpot: Int!
  urgentAd: Int!
  topAd: Int!
}

# Util
# ------------------------------------------------------

type Date {
  day: Int!
  month: Int!
  year: Int!
}

input DateInput {
  day: Int!
  month: Int!
  year: Int!
}

type Subscription {
  messageSubscription(conversationID: ID!): Message
}

input UserWhereInput {
  id: ID
  email: String
  firstName: String
  firstName_contains: String
  lastName: String
  lastName_contains: String
  companyName: String
  companyName_contains: String
  location: LocationInput
  radius: Int
  radius_lt: Int
  radius_lte: Int
  radius_gt: Int
  radius_gte: Int
  gender: Gender
  clientType: ClientType
  language: UserLanguage
  carLimit: Int
  carLimit_lt: Int
  carLimit_lte: Int
  carLimit_gt: Int
  carLimit_gte: Int
  createdAt: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  updatedAt: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

type UsersPayload {
  users: [User]
  count: Int
}
