type User {
  id: ID! @unique
  email: String! @unique
  firstName: String
  lastName: String
  companyName: String
  password: String!
  location: String!
  birthDate: Date
  gender: Gender
  permissions: [Permission!]!
  ads: [Ad!]!
  cars: [Car!]!
  facebookID: ID @unique
  googleID: ID @unique
  resetToken: String
  resetTokenExpiry: Float
  conversations: [Conversation!] @relation(name: "BuyerRelation")
  clientType: ClientType!
  notifications: [Notification!]!
  offers: [Offer!]!
  stripeCustomerID: String
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ClientType {
  COMPANY
  INDIVIDUAL
}

enum Permission {
  USER
  PREMIUM
  ADMIN
}

type Ad {
  id: ID! @unique
  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  offers: [Offer!]
  priceLowerBound: Float
  priceHigherBound: Float
  manufacturer: Manufacturer
  model: CarModel
  category: CarCategory
  mileageLowerBound: Int
  mileageHigherBound: Int
  yearLowerBound: Int
  yearHigherBound: Int
  features: [CarFeature!]
  isUrgent: Boolean! @default(value: false)
  isFirst: Boolean! @default(value: false)
  status: AdStatus! @default(value: PUBLISHED)
}

type Date {
  id: ID! @unique
  day: Int!
  month: Int!
  year: Int!
}

enum AdStatus {
  PUBLISHED
  ACCEPTED
  DELETED
}

type Offer {
  id: ID! @unique
  creator: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  ad: Ad!
  car: Car!
  price: Float!
  status: OfferStatus! @default(value: PUBLISHED)
  finalRank: Int
  addons: [OfferAddon!]
  conversation: Conversation
}

type OfferAddon{
  id: ID! @unique
  name: String!
  rankValue: Int! @default(value: 0)
}

enum OfferStatus {
  PUBLISHED
  ACCEPTED
  DELETED
}

type Car {
  id: ID! @unique
  owner: User!
  manufacturer: Manufacturer!
  model: CarModel!
  category: CarCategory!
  description: String
  year: Int!
  mileage: Int!
  photos: [String!]!
  features: [CarFeature!]!
  status: CarStatus!  @default(value: PUBLISHED)
  offers: [Offer!]
}

enum CarStatus {
  PUBLISHED
  SOLD
  DELETED
}

enum CarFeatureType {
  TRUE_FALSE
  MULTIPLE_CHOICE
}

type CarCategory {
  id: ID! @unique
  name: String!
}

type CarFeatureCategory {
  id: ID! @unique
  name: String! @unique
  type: CarFeatureType!
  features: [CarFeature!]!
}

type CarFeature {
  id: ID! @unique
  name: String!
  category: CarFeatureCategory!
}

type Manufacturer {
  id: ID! @unique
  name: String!
  models: [CarModel!]!
}

type CarModel {
  id: ID! @unique
  name: String!
}

type Conversation {
  id: ID! @unique
  offer: Offer!
  buyer: User! @relation(name: "BuyerRelation")
  seller: User! @relation(name: "SellerRelation")
  messages: [Message!]!
}

type Message {
  id: ID! @unique
  updatedAt: DateTime!
  sender: User!
  text: String!
  image: String
  conversation: Conversation!
}

type Notification {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  type: NotificationType!
  objectID: ID
  count: Int! @default(value: 1)
}

enum NotificationType {
  GENERAL
  OFFER_MESSAGE
  NEW_OFFER
}